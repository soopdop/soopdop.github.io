{"version":3,"sources":["webpack:///./src/templates/Category.tsx"],"names":["Category","data","pageContext","classes","useStyles","siteTitle","site","siteMetadata","title","category","allMarkdownRemark","edges","totalCount","tagHeader","container","item","xs","className","titleBox","categoryTitle","variant","subTitle","mdUp","selectedCategory","md","lg","postListContainer","map","node","key","fields","slug","xsDown","post","smUp","smDown","categoryList","pageQuery","makeStyles","theme","position","marginTop","top","alignSelf","margin","spacing","display","flexDirection","alignItems","padding","overflow","whiteSpace","fontSize","breakpoints","down","textAlign"],"mappings":"4FAAA,8MA+FeA,UA3EuD,SAAC,GAGjE,MAFJC,EAEI,EAFJA,KACAC,EACI,EADJA,YAEMC,EAAUC,IACVC,GAAY,UAAAJ,EAAKK,KAAKC,oBAAV,eAAwBC,QAAxB,QACVC,EAAaP,EAAbO,SAHJ,EAI0BR,EAAKS,kBAA3BC,EAJJ,EAIIA,MAAOC,EAJX,EAIWA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,oBAEKH,EAFL,IAGf,OACE,kBAAC,IAAD,CAAQJ,UAAWA,GACjB,kBAAC,IAAD,CAAKG,MAAOC,IACZ,kBAAC,IAAD,CAAMK,WAAS,GACb,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAKC,UAAWd,EAAQe,UACtB,kBAAC,IAAD,CAAYD,UAAWd,EAAQgB,cAAeC,QAAQ,MACnDP,GAEH,kBAAC,IAAD,CAAYI,UAAWd,EAAQkB,UAA/B,kCAKJ,kBAAC,IAAD,CAAQC,MAAI,GACV,kBAAC,IAAD,CAAMP,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAgBO,iBAAiB,UAGrC,kBAAC,IAAD,CAAMR,MAAI,EAACC,GAAI,GAAIQ,GAAI,EAAGC,GAAI,GAC5B,kBAAC,IAAD,CAAMX,WAAS,EAACG,UAAWd,EAAQuB,mBAChCf,EAAMgB,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACZ,OACE,kBAAC,IAAD,CAAMb,MAAI,EAACC,GAAI,GAAIa,IAAKD,EAAKE,OAAOC,MAClC,kBAAC,IAAD,CAAQC,QAAM,GACZ,kBAAC,IAAD,CAAcC,KAAML,KAEtB,kBAAC,IAAD,CAAQM,MAAI,GACV,kBAAC,IAAD,CAAUD,KAAML,WAO5B,kBAAC,IAAD,CAAQO,QAAM,GACZ,kBAAC,IAAD,CAAMpB,MAAI,EAACC,GAAI,GAAIQ,GAAI,EAAGC,GAAI,EAAGR,UAAWd,EAAQiC,cAClD,kBAAC,IAAD,CAAcb,iBAAiB,aA8BpC,IAAMc,EAAY,aAqCnBjC,EAAYkC,aAAW,SAAAC,GAAK,YAAK,CACrCH,aAAc,CACZI,SAAU,SACVC,UAAW,OACXC,IAAK,MACLC,UAAW,cAEbjB,kBAAmB,CACjBkB,OAAQL,EAAMM,QAAQ,EAAG,EAAG,EAAG,IAEjC3B,SAAU,CACR4B,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,QAASV,EAAMM,QAAQ,EAAG,EAAG,EAAG,IAElC1B,eAAa,GACXyB,OAAQL,EAAMM,QAAQ,EAAG,EAAG,EAAG,GAC/BK,SAAU,SACVC,WAAY,SACZC,SAAU,QAJC,EAKVb,EAAMc,YAAYC,KAAK,OAAQ,CAC9BF,SAAU,QAND,EAQXG,UAAW,SARA,GAUblC,SAAU,CACRuB,OAAQL,EAAMM,SAAS,EAAG,EAAG,EAAG","file":"component---src-templates-category-tsx-3dedc51b362d38f60c3f.js","sourcesContent":["import {\n  Box,\n  Card,\n  CardActionArea,\n  Grid,\n  Hidden,\n  Typography,\n} from \"@material-ui/core\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport { graphql, navigate, PageProps } from \"gatsby\"\nimport React from \"react\"\nimport { CategoryQuery, SitePageContext } from \"../../graphql-types\"\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/seo\"\nimport CategoryList from \"../components/CategoryList\"\nimport CategorySelect from \"../components/CategorySelect\"\nimport PostListItem from \"../components/PostListItem\"\nimport PostCard from \"../components/PostCard\"\n\n// SitePageContext로부터 context를 이용해 전달한 값들의 type을 얻을 수 있다.\nconst Category: React.FC<PageProps<CategoryQuery, SitePageContext>> = ({\n  data,\n  pageContext,\n}) => {\n  const classes = useStyles()\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { category } = pageContext // gatsby-node.js의 createPage에서 넣어준 카테고리 이름.\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } categorized as \"${category}\"`\n  return (\n    <Layout siteTitle={siteTitle}>\n      <SEO title={category} />\n      <Grid container>\n        <Grid item xs={12}>\n          <Box className={classes.titleBox}>\n            <Typography className={classes.categoryTitle} variant=\"h1\">\n              {tagHeader}\n            </Typography>\n            <Typography className={classes.subTitle}>\n              Create What You Want to Use.\n            </Typography>\n          </Box>\n        </Grid>\n        <Hidden mdUp>\n          <Grid item xs={12}>\n            <CategorySelect selectedCategory=\"All\" />\n          </Grid>\n        </Hidden>\n        <Grid item xs={12} md={9} lg={8}>\n          <Grid container className={classes.postListContainer}>\n            {edges.map(({ node }) => {\n              return (\n                <Grid item xs={12} key={node.fields.slug}>\n                  <Hidden xsDown>\n                    <PostListItem post={node} />\n                  </Hidden>\n                  <Hidden smUp>\n                    <PostCard post={node} />\n                  </Hidden>\n                </Grid>\n              )\n            })}\n          </Grid>\n        </Grid>\n        <Hidden smDown>\n          <Grid item xs={12} md={3} lg={4} className={classes.categoryList}>\n            <CategoryList selectedCategory=\"All\" />\n          </Grid>\n        </Hidden>\n      </Grid>\n    </Layout>\n  )\n  // return (\n  //   <Layout location={location} title={title}>\n  //     <SEO title={title} />\n  //     <h1>{tagHeader}</h1>\n  //     <ul>\n  //       {/* 각 카테고리에 해당하는 포스트의 목록을 출력한다. */}\n  //       {edges.map(({ node }) => {\n  //         const { slug } = node.fields\n  //         const { title } = node.frontmatter\n  //         return (\n  //           <li key={slug}>\n  //             <Link to={slug}>{title}</Link>\n  //           </li>\n  //         )\n  //       })}\n  //     </ul>\n  //     <Link to=\"/\">Go back to the homepage</Link>\n  //   </Layout>\n  // )\n}\n\nexport default Category\n\n// 쿼리의 argument인 $category는 page context로 전달 받는다.\nexport const pageQuery = graphql`\n  query Category($category: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { categories: { in: [$category] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            thumbnail {\n              childImageSharp {\n                fluid(maxWidth: 600, quality: 100) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nconst useStyles = makeStyles(theme => ({\n  categoryList: {\n    position: \"sticky\",\n    marginTop: \"20px\",\n    top: \"0px\",\n    alignSelf: \"flex-start\",\n  },\n  postListContainer: {\n    margin: theme.spacing(0, 0, 7, 0),\n  },\n  titleBox: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 0, 7, 0),\n  },\n  categoryTitle: {\n    margin: theme.spacing(4, 0, 0, 0),\n    overflow: \"hidden\",\n    whiteSpace: \"normal\",\n    fontSize: \"48px\",\n    [theme.breakpoints.down(\"xs\")]: {\n      fontSize: \"36px\",\n    },\n    textAlign: \"center\",\n  },\n  subTitle: {\n    margin: theme.spacing(-1, 0, 0, 0),\n  },\n}))\n"],"sourceRoot":""}