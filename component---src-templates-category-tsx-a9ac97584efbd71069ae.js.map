{"version":3,"sources":["webpack:///./node_modules/@material-ui/core/esm/Card/Card.js","webpack:///./src/templates/category.tsx","webpack:///./node_modules/@material-ui/core/esm/CardActionArea/CardActionArea.js"],"names":["Card","props","ref","classes","className","_props$raised","raised","other","root","elevation","overflow","name","Category","data","pageContext","useStyles","siteTitle","site","siteMetadata","title","category","allMarkdownRemark","edges","totalCount","tagHeader","container","item","xs","titleBox","categoryTitle","variant","subTitle","lgUp","selectedCategory","md","lg","postListContainer","map","node","frontmatter","fields","slug","key","onClick","setTimeout","navigate","postItemCard","postItemCardArea","gutterBottom","date","dangerouslySetInnerHTML","__html","description","excerpt","itemProp","mdDown","categoryList","pageQuery","makeStyles","theme","flexGrow","position","top","alignSelf","margin","spacing","padding","display","flexDirection","alignItems","whiteSpace","fontSize","breakpoints","down","textAlign","CardActionArea","children","focusVisibleClassName","focusVisible","focusHighlight","width","opacity","palette","action","hoverOpacity","pointerEvents","right","bottom","left","borderRadius","backgroundColor","transition","transitions","create","duration","short"],"mappings":"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","file":"component---src-templates-category-tsx-a9ac97584efbd71069ae.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = /*#__PURE__*/React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);","import {\n  Box,\n  Card,\n  CardActionArea,\n  Grid,\n  Hidden,\n  Typography,\n} from \"@material-ui/core\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport { graphql, navigate, PageProps } from \"gatsby\"\nimport React from \"react\"\nimport { CategoryQuery, SitePageContext } from \"../../graphql-types\"\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/seo\"\nimport CategoryList from \"../pages/indexPageComponents/CategoryList\"\nimport CategorySelect from \"../pages/indexPageComponents/CategorySelect\"\n\n// SitePageContext로부터 context를 이용해 전달한 값들의 type을 얻을 수 있다.\nconst Category: React.FC<PageProps<CategoryQuery, SitePageContext>> = ({\n  data,\n  pageContext,\n}) => {\n  const classes = useStyles()\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { category } = pageContext // gatsby-node.js의 createPage에서 넣어준 카테고리 이름.\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } categorized as \"${category}\"`\n  return (\n    <Layout siteTitle={siteTitle}>\n      <SEO title={category} />\n      <Grid container>\n        <Grid item xs={12}>\n          <Box className={classes.titleBox}>\n            <Typography className={classes.categoryTitle} variant=\"h1\">\n              {tagHeader}\n            </Typography>\n            <Typography className={classes.subTitle}>\n              Create What You Want to Use.\n            </Typography>\n          </Box>\n        </Grid>\n        <Hidden lgUp>\n          <Grid item xs={12}>\n            <CategorySelect selectedCategory={category} />\n          </Grid>\n        </Hidden>\n        <Grid item xs={12} md={12} lg={9}>\n          <Grid container className={classes.postListContainer}>\n            {edges.map(({ node }) => {\n              const title = node.frontmatter.title || node.fields.slug\n              return (\n                <Grid item xs={12} key={node.fields.slug}>\n                  <Card\n                    variant=\"outlined\"\n                    onClick={() =>\n                      setTimeout(() => navigate(node.fields.slug), 300)\n                    }\n                    className={classes.postItemCard}\n                  >\n                    <CardActionArea className={classes.postItemCardArea}>\n                      <Typography gutterBottom variant=\"h2\">\n                        {title}\n                      </Typography>\n                      <small>{node.frontmatter.date}</small>\n                      <p\n                        dangerouslySetInnerHTML={{\n                          __html: node.frontmatter.description || node.excerpt,\n                        }}\n                        itemProp=\"description\"\n                      />\n                    </CardActionArea>\n                  </Card>\n                </Grid>\n              )\n            })}\n          </Grid>\n        </Grid>\n        <Hidden mdDown>\n          <Grid item xs={12} md={12} lg={3} className={classes.categoryList}>\n            <CategoryList selectedCategory={category} />\n          </Grid>\n        </Hidden>\n      </Grid>\n    </Layout>\n  )\n  // return (\n  //   <Layout location={location} title={title}>\n  //     <SEO title={title} />\n  //     <h1>{tagHeader}</h1>\n  //     <ul>\n  //       {/* 각 카테고리에 해당하는 포스트의 목록을 출력한다. */}\n  //       {edges.map(({ node }) => {\n  //         const { slug } = node.fields\n  //         const { title } = node.frontmatter\n  //         return (\n  //           <li key={slug}>\n  //             <Link to={slug}>{title}</Link>\n  //           </li>\n  //         )\n  //       })}\n  //     </ul>\n  //     <Link to=\"/\">Go back to the homepage</Link>\n  //   </Layout>\n  // )\n}\n\nexport default Category\n\n// 쿼리의 argument인 $category는 page context로 전달 받는다.\nexport const pageQuery = graphql`\n  query Category($category: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { categories: { in: [$category] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  categoryList: {\n    position: \"sticky\",\n    top: \"75px\",\n    alignSelf: \"flex-start\",\n  },\n  postListContainer: {\n    margin: theme.spacing(0, 0, 7, 0),\n  },\n  postItemCardArea: {\n    padding: theme.spacing(3),\n  },\n  postItemCard: {\n    margin: theme.spacing(1, 0, 0, 0),\n  },\n  titleBox: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    padding: theme.spacing(7, 0),\n  },\n  categoryTitle: {\n    margin: theme.spacing(4, 0, 0, 0),\n    overflow: \"hidden\",\n    whiteSpace: \"normal\",\n    fontSize: \"48px\",\n    [theme.breakpoints.down(\"xs\")]: {\n      fontSize: \"36px\",\n    },\n    textAlign: \"center\",\n  },\n  subTitle: {\n    margin: theme.spacing(-1, 0, 0, 0),\n  },\n}))\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'block',\n      textAlign: 'inherit',\n      width: '100%',\n      '&:hover $focusHighlight': {\n        opacity: theme.palette.action.hoverOpacity\n      },\n      '&$focusVisible $focusHighlight': {\n        opacity: 0.12\n      }\n    },\n\n    /* Pseudo-class applied to the ButtonBase root element if the action area is keyboard focused. */\n    focusVisible: {},\n\n    /* Styles applied to the overlay that covers the action area when it is keyboard focused. */\n    focusHighlight: {\n      overflow: 'hidden',\n      pointerEvents: 'none',\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      borderRadius: 'inherit',\n      opacity: 0,\n      backgroundColor: 'currentcolor',\n      transition: theme.transitions.create('opacity', {\n        duration: theme.transitions.duration.short\n      })\n    }\n  };\n};\nvar CardActionArea = /*#__PURE__*/React.forwardRef(function CardActionArea(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      focusVisibleClassName = props.focusVisibleClassName,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"focusVisibleClassName\"]);\n\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, className),\n    focusVisibleClassName: clsx(focusVisibleClassName, classes.focusVisible),\n    ref: ref\n  }, other), children, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.focusHighlight\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardActionArea'\n})(CardActionArea);"],"sourceRoot":""}