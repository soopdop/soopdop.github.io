{"version":3,"sources":["webpack:///./src/components/TableOfContents/index.tsx","webpack:///./src/templates/BlogPost/index.tsx"],"names":["TableOfContents","content","classes","useStyles","className","tableOfContent","dangerouslySetInnerHTML","__html","makeStyles","theme","position","top","pageQuery","BlogPostTemplate","data","location","pageContext","post","markdownRemark","siteTitle","site","siteMetadata","title","previous","next","Fragment","CssBaseline","frontmatter","description","excerpt","Container","maxWidth","Grid","container","item","xs","md","lg","Typography","variant","date","blogContent","html","Hidden","mdDown","tableOfContents","headings","i","typography","margin","spacing","textAlign","color","caption","fontSize"],"mappings":"mQAiBeA,G,UAbS,SAAC,GAAgB,IAAdC,EAAc,EAAdA,QACnBC,EAAUC,IAChB,OACE,yBAEEC,UAAcF,EAAQG,eAAb,qBAGTC,wBAAyB,CAAEC,OAAQN,OAOnCE,EAAYK,aAAW,SAAAC,GAAK,MAAK,CACrCJ,eAAgB,CACdK,SAAU,SACVC,IAAK,Y,gGCiGIC,G,UAFEC,UAhGoD,SAAC,GAI9D,MAHJC,EAGI,EAHJA,KAIMZ,GADF,EAFJa,SAEI,EADJC,YAEgBb,KACVc,EAAOH,EAAKI,eACZC,GAAY,UAAAL,EAAKM,KAAKC,oBAAV,eAAwBC,QAAxB,QACSR,EAAnBS,SAAmBT,EAATU,KAElB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,IAAD,CACEJ,MAAOL,EAAKU,YAAYL,MACxBM,YAAaX,EAAKU,YAAYC,aAAeX,EAAKY,UAEpD,kBAAC,IAAD,CAAUV,UAAWA,IACrB,kBAACW,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAC7B,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKnC,UAAWF,EAAQoB,OACzCL,EAAKU,YAAYL,OAEpB,kBAACgB,EAAA,EAAD,CAAYlC,UAAWF,EAAQsC,KAAMD,QAAQ,aAC1CtB,EAAKU,YAAYa,MAEpB,yBACEpC,UAAcF,EAAQuC,YAAb,iBACTnC,wBAAyB,CAAEC,OAAQU,EAAKyB,SAG5C,kBAACC,EAAA,EAAD,CAAQC,QAAM,GACZ,kBAACZ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAC7B,kBAAC,EAAD,CAAiBpC,QAASa,EAAKI,eAAe2B,sBAKtD,kBAAC,IAAD,QA2DmB,cAwCnB1C,EAAYK,aAAW,SAAAC,GAE3B,IADA,IAAMqC,EAA6C,GAC1CC,EAAI,EAAGA,GAAK,EAAGA,IACtBD,EAAS,MAAMC,GAAf,iBACKtC,EAAMuC,WAAN,IAAqBD,GAD1B,CAEEE,OAAQxC,EAAMyC,QAAQ,EAAG,EAAG,EAAG,KAInC,MAAO,CACL5B,MAAO,CACL2B,OAAQxC,EAAMyC,QAAQ,EAAG,EAAG,EAAG,IAEjCV,KAAM,CACJS,OAAQxC,EAAMyC,QAAQ,EAAG,EAAG,EAAG,IAEjCT,YAAa,OAAF,UACNK,EADM,CAET,eAAgB,CACd,MAAO,CACL,YAAa,CACX7C,QAAS,QAEX,WAAY,CACVA,QAAS,QAEXkD,UAAW,SACXC,MAAO3C,EAAMuC,WAAWK,QAAQD,MAChCE,SAAU7C,EAAMuC,WAAWK,QAAQC","file":"component---src-templates-blog-post-index-tsx-e07a19a418e6cff1af4f.js","sourcesContent":["import { makeStyles } from \"@material-ui/core\"\r\nimport React from \"react\"\r\nimport \"./style.scss\"\r\n\r\nconst TableOfContents = ({ content }) => {\r\n  const classes = useStyles()\r\n  return (\r\n    <div\r\n      // 스타일링을 위해서 클래스이름 부여 한다.\r\n      className={`${classes.tableOfContent} table-of-contents`}\r\n      // dangerouslySetInnerHTML는 보안 관점에서 위험하지만\r\n      // innerHTML을 사용하겠다는 뜻이다.\r\n      dangerouslySetInnerHTML={{ __html: content }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default TableOfContents\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  tableOfContent: {\r\n    position: \"sticky\",\r\n    top: \"75px\",\r\n  },\r\n}))\r\n","import React from \"react\"\nimport { graphql, Link, PageProps } from \"gatsby\"\nimport { BlogPostBySlugQuery } from \"../../../graphql-types\"\nimport Bio from \"../../components/bio\"\nimport Layout from \"../../components/layout\"\nimport SEO from \"../../components/seo\"\nimport TableOfContents from \"../../components/TableOfContents\"\nimport {\n  Container,\n  CssBaseline,\n  Grid,\n  Hidden,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\"\nimport MyAppBar from \"../../components/my-app-bar\"\nimport \"./prism.scss\"\nimport Footer from \"../../components/footer\"\nimport { CSSProperties } from \"@material-ui/core/styles/withStyles\"\nimport \"./style.scss\"\n\nconst BlogPostTemplate: React.FC<PageProps<BlogPostBySlugQuery>> = ({\n  data,\n  location,\n  pageContext,\n}) => {\n  const classes = useStyles()\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <MyAppBar siteTitle={siteTitle} />\n      <Container maxWidth=\"lg\">\n        <Grid container>\n          <Grid item xs={12} md={12} lg={8}>\n            <Typography variant=\"h1\" className={classes.title}>\n              {post.frontmatter.title}\n            </Typography>\n            <Typography className={classes.date} variant=\"subtitle1\">\n              {post.frontmatter.date}\n            </Typography>\n            <div\n              className={`${classes.blogContent} blog-contents`}\n              dangerouslySetInnerHTML={{ __html: post.html }}\n            />\n          </Grid>\n          <Hidden mdDown>\n            <Grid item xs={12} md={12} lg={4}>\n              <TableOfContents content={data.markdownRemark.tableOfContents} />\n            </Grid>\n          </Hidden>\n        </Grid>\n      </Container>\n      <Footer />\n    </React.Fragment>\n    // <Layout location={location} title={siteTitle}>\n    //   <div className=\"blog-post-container\">\n    //     <div className=\"content\">\n    //       <article\n    //         className=\"blog-post\"\n    //         itemScope\n    //         itemType=\"http://schema.org/Article\"\n    //       >\n    //         <header>\n    //           <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n    //           <p>{post.frontmatter.date}</p>\n    //         </header>\n    //         <section\n    //           dangerouslySetInnerHTML={{ __html: post.html }}\n    //           itemProp=\"articleBody\"\n    //         />\n\n    //         <hr />\n    //         <footer>\n    //           <Bio />\n    //         </footer>\n    //       </article>\n    //       <nav className=\"blog-post-nav\">\n    //         <ul\n    //           style={{\n    //             display: `flex`,\n    //             flexWrap: `wrap`,\n    //             justifyContent: `space-between`,\n    //             listStyle: `none`,\n    //             padding: 0,\n    //           }}\n    //         >\n    //           <li>\n    //             {previous && (\n    //               <Link to={previous.fields.slug} rel=\"prev\">\n    //                 ← {previous.frontmatter.title}\n    //               </Link>\n    //             )}\n    //           </li>\n    //           <li>\n    //             {next && (\n    //               <Link to={next.fields.slug} rel=\"next\">\n    //                 {next.frontmatter.title} →\n    //               </Link>\n    //             )}\n    //           </li>\n    //         </ul>\n    //       </nav>\n    //     </div>\n    //     <TableOfContents content={data.markdownRemark.tableOfContents} />\n    //   </div>\n    // </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n      tableOfContents(maxDepth: 3)\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\nconst useStyles = makeStyles(theme => {\n  const headings: { [key: string]: CSSProperties } = {}\n  for (let i = 1; i <= 6; i++) {\n    headings[`& h${i}`] = {\n      ...theme.typography[`h${i}`],\n      margin: theme.spacing(6, 0, 3, 0),\n    }\n  }\n\n  return {\n    title: {\n      margin: theme.spacing(4, 0, 0, 0),\n    },\n    date: {\n      margin: theme.spacing(0, 0, 4, 0),\n    },\n    blogContent: {\n      ...headings,\n      \"& figcaption\": {\n        \"& p\": {\n          \"&::before\": {\n            content: '\"[ \"',\n          },\n          \"&::after\": {\n            content: '\" ]\"',\n          },\n          textAlign: \"center\",\n          color: theme.typography.caption.color,\n          fontSize: theme.typography.caption.fontSize,\n        },\n      },\n    },\n  }\n})\n"],"sourceRoot":""}