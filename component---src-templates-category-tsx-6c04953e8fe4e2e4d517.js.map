{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/templates/category.tsx","webpack:///./src/components/seo.js"],"names":["location","title","children","isRootPath","header","className","to","data-is-root-path","Date","href","Category","data","pageContext","site","siteMetadata","category","allMarkdownRemark","edges","totalCount","tagHeader","map","node","slug","fields","frontmatter","key","pageQuery","SEO","description","lang","meta","useStaticQuery","metaDescription","defaultTitle","htmlAttributes","titleTemplate","name","content","property"],"mappings":"4FAAA,qCAmCA,IAhCe,SAAC,GAAmC,IAGjD,EAHgBA,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAE3BC,EADN,MACmBH,WAiBnB,OAbEI,EADF,EAEI,wBAAIC,UAAU,gBACZ,0BAAMC,GAAG,KAFbF,IAOE,0BAAMC,UAAN,mBAAmCC,GAAG,KADxCF,GAQA,yBAAKC,UAAL,iBAAgCE,oBAAmBJ,GACjD,4BAAQE,UAAU,iBADpB,GAEE,8BAFF,GAGE,sCACK,IAAIG,MADT,iCAGE,uBAAGC,KAAK,4BAPd,c,kCCtBF,8GAuCeC,UAhCuD,SAAC,GAIjE,IAHJC,EAGI,EAHJA,KACAX,EAEI,EAFJA,SACAY,EACI,EADJA,YAEQX,EAAUU,EAAKE,KAAKC,aAApBb,MACAc,EAAaH,EAAbG,SAFJ,EAG0BJ,EAAKK,kBAA3BC,EAHJ,EAGIA,MAAOC,EAHX,EAGWA,WACTC,EAAeD,EAAN,SAAuC,IAAfA,EAAmB,GAAK,KAAhD,sBACSH,EADT,IAGf,OACE,kBAAC,IAAD,CAAQf,SAAUA,EAAUC,MAAOA,GACjC,kBAAC,IAAD,CAAKA,MAAOA,IACZ,4BAAKkB,GACL,4BAEGF,EAAMG,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACArB,EAAUoB,EAAKG,YAAfvB,MACR,OACE,wBAAIwB,IAAKH,GACP,kBAAC,OAAD,CAAMhB,GAAIgB,GAAOrB,QAKzB,kBAAC,OAAD,CAAMK,GAAG,KAAT,6BAQC,IAAMoB,EAAY,c,kCC1CzB,iDAYMC,EAAM,SAAC,GAAwC,IAAD,MAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAM7B,EAAY,EAAZA,MAC9BY,EAASkB,yBADiC,mBAiB5CC,EAAkBJ,GAAef,eAAvC,YACMoB,EAAY,UAAGpB,EAAH,iCAAGA,EAArB,MAEA,OACE,4BACEqB,eAAgB,CACdL,QAEF5B,MAJF,EAKEkC,cAAeF,EAAY,UAL7B,KAMEH,KAAM,CACJ,CACEM,KADF,cAEEC,QAASL,GAEX,CACEM,SADF,WAEED,QAASpC,GAEX,CACEqC,SADF,iBAEED,QAASL,GAEX,CACEM,SADF,UAEED,QAAQ,WAEV,CACED,KADF,eAEEC,QAAQ,WAEV,CACED,KADF,kBAEEC,SAAS,UAAAxB,EAAA,kFAEX,CACEuB,KADF,gBAEEC,QAASpC,GAEX,CACEmC,KADF,sBAEEC,QAASL,GAEX,CACEI,KADF,2BAEEC,QAAS,gDAnCP,aA0CZV,eAAmB,CACjBE,KADiB,KAEjBC,KAFiB,GAGjBF,YAAY,IAUd","file":"component---src-templates-category-tsx-6c04953e8fe4e2e4d517.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        © {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","import { graphql, Link, PageProps } from \"gatsby\"\nimport React from \"react\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { CategoryQuery, SitePageContext } from \"../../graphql-types\"\n\n// SitePageContext로부터 context를 이용해 전달한 값들의 type을 얻을 수 있다.\nconst Category: React.FC<PageProps<CategoryQuery, SitePageContext>> = ({\n  data,\n  location,\n  pageContext,\n}) => {\n  const { title } = data.site.siteMetadata\n  const { category } = pageContext // gatsby-node.js의 createPage에서 넣어준 카테고리 이름.\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${totalCount === 1 ? \"\" : \"s\"\n    } categorized with \"${category}\"`\n\n  return (\n    <Layout location={location} title={title}>\n      <SEO title={title} />\n      <h1>{tagHeader}</h1>\n      <ul>\n        {/* 각 카테고리에 해당하는 포스트의 목록을 출력한다. */}\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          return (\n            <li key={slug}>\n              <Link to={slug}>{title}</Link>\n            </li>\n          )\n        })}\n      </ul>\n      <Link to=\"/\">Go back to the homepage</Link>\n    </Layout>\n  )\n}\n\nexport default Category\n\n// 쿼리의 argument인 $category는 page context로 전달 받는다.\nexport const pageQuery = graphql`\n  query Category($category: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { categories: { in: [$category] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n        {\n          name: \"google-site-verification\",\n          content: \"D3zX2_B3puuN1KcEveIwHDRw2fcaW00RvY50hcEngIE\",\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}