{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/templates/category.tsx","webpack:///./src/components/seo.js"],"names":["location","title","children","isRootPath","header","className","to","data-is-root-path","Date","href","Category","data","pageContext","site","siteMetadata","category","allMarkdownRemark","edges","totalCount","tagHeader","map","node","slug","fields","frontmatter","key","pageQuery","SEO","description","lang","meta","useStaticQuery","metaDescription","defaultTitle","htmlAttributes","titleTemplate","name","content","property"],"mappings":"4FAAA,qCAmCA,IAhCe,SAAC,GAAmC,IAGjD,EAHgBA,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAE3BC,EADN,MACmBH,WAiBnB,OAbEI,EADF,EAEI,wBAAIC,UAAU,gBACZ,0BAAMC,GAAG,KAFbF,IAOE,0BAAMC,UAAN,mBAAmCC,GAAG,KADxCF,GAQA,yBAAKC,UAAL,iBAAgCE,oBAAmBJ,GACjD,4BAAQE,UAAU,iBADpB,GAEE,8BAFF,GAGE,sCACK,IAAIG,MADT,iCAGE,uBAAGC,KAAK,4BAPd,c,kCCtBF,8GAuCeC,UAhCuD,SAAC,GAIjE,IAHJC,EAGI,EAHJA,KACAX,EAEI,EAFJA,SACAY,EACI,EADJA,YAEQX,EAAUU,EAAKE,KAAKC,aAApBb,MACAc,EAAaH,EAAbG,SAFJ,EAG0BJ,EAAKK,kBAA3BC,EAHJ,EAGIA,MAAOC,EAHX,EAGWA,WACTC,EAAeD,EAAN,SAAuC,IAAfA,EAAmB,GAAK,KAAhD,sBACSH,EADT,IAGf,OACE,kBAAC,IAAD,CAAQf,SAAUA,EAAUC,MAAOA,GACjC,kBAAC,IAAD,CAAKA,MAAOA,IACZ,4BAAKkB,GACL,4BAEGF,EAAMG,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACArB,EAAUoB,EAAKG,YAAfvB,MACR,OACE,wBAAIwB,IAAKH,GACP,kBAAC,OAAD,CAAMhB,GAAIgB,GAAOrB,QAKzB,kBAAC,OAAD,CAAMK,GAAG,KAAT,6BAQC,IAAMoB,EAAY,c,kCC1CzB,iDAYMC,EAAM,SAAC,GAAwC,IAAD,MAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAM7B,EAAY,EAAZA,MAC9BY,EAASkB,yBADiC,mBAiB5CC,EAAkBJ,GAAef,eAAvC,YACMoB,EAAY,UAAGpB,EAAH,iCAAGA,EAArB,MAEA,OACE,4BACEqB,eAAgB,CACdL,QAEF5B,MAJF,EAKEkC,cAAeF,EAAY,UAL7B,KAMEH,KAAM,CACJ,CACEM,KADF,cAEEC,QAASL,GAEX,CACEM,SADF,WAEED,QAASpC,GAEX,CACEqC,SADF,iBAEED,QAASL,GAEX,CACEM,SADF,UAEED,QAAQ,WAEV,CACED,KADF,eAEEC,QAAQ,WAEV,CACED,KADF,kBAEEC,SAAS,UAAAxB,EAAA,kFAEX,CACEuB,KADF,gBAEEC,QAASpC,GAEX,CACEmC,KADF,sBAEEC,QAASL,GAEX,CACEI,KADF,2BAEEC,QAAS,gDAnCP,aA0CZV,eAAmB,CACjBE,KADiB,KAEjBC,KAFiB,GAGjBF,YAAY,IAUd","file":"component---src-templates-category-tsx-aa64665a435a7d1abe05.js","sourcesContent":["import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nconst Layout = ({ location, title, children }) => {\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  const isRootPath = location.pathname === rootPath\r\n  let header\r\n\r\n  if (isRootPath) {\r\n    header = (\r\n      <h1 className=\"main-heading\">\r\n        <Link to=\"/\">{title}</Link>\r\n      </h1>\r\n    )\r\n  } else {\r\n    header = (\r\n      <Link className=\"header-link-home\" to=\"/\">\r\n        {title}\r\n      </Link>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\r\n      <header className=\"global-header\">{header}</header>\r\n      <main>{children}</main>\r\n      <footer>\r\n        © {new Date().getFullYear()}, Built with\r\n        {` `}\r\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","import { graphql, Link, PageProps } from \"gatsby\"\r\nimport React from \"react\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport { CategoryQuery, SitePageContext } from \"../../graphql-types\"\r\n\r\n// SitePageContext로부터 context를 이용해 전달한 값들의 type을 얻을 수 있다.\r\nconst Category: React.FC<PageProps<CategoryQuery, SitePageContext>> = ({\r\n  data,\r\n  location,\r\n  pageContext,\r\n}) => {\r\n  const { title } = data.site.siteMetadata\r\n  const { category } = pageContext // gatsby-node.js의 createPage에서 넣어준 카테고리 이름.\r\n  const { edges, totalCount } = data.allMarkdownRemark\r\n  const tagHeader = `${totalCount} post${totalCount === 1 ? \"\" : \"s\"\r\n    } categorized with \"${category}\"`\r\n\r\n  return (\r\n    <Layout location={location} title={title}>\r\n      <SEO title={title} />\r\n      <h1>{tagHeader}</h1>\r\n      <ul>\r\n        {/* 각 카테고리에 해당하는 포스트의 목록을 출력한다. */}\r\n        {edges.map(({ node }) => {\r\n          const { slug } = node.fields\r\n          const { title } = node.frontmatter\r\n          return (\r\n            <li key={slug}>\r\n              <Link to={slug}>{title}</Link>\r\n            </li>\r\n          )\r\n        })}\r\n      </ul>\r\n      <Link to=\"/\">Go back to the homepage</Link>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default Category\r\n\r\n// 쿼리의 argument인 $category는 page context로 전달 받는다.\r\nexport const pageQuery = graphql`\r\n  query Category($category: String) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { categories: { in: [$category] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst SEO = ({ description, lang, meta, title }) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            social {\r\n              twitter\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata?.social?.twitter || ``,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          name: \"google-site-verification\",\r\n          content: \"D3zX2_B3puuN1KcEveIwHDRw2fcaW00RvY50hcEngIE\",\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n"],"sourceRoot":""}