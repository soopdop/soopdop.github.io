{"version":3,"sources":["webpack:///./src/components/TableOfContents/index.tsx","webpack:///./src/templates/blog-post.tsx"],"names":["TableOfContents","content","classes","useStyles","className","tableOfContent","dangerouslySetInnerHTML","__html","makeStyles","theme","position","top","pageQuery","BlogPostTemplate","data","location","pageContext","post","markdownRemark","siteTitle","site","siteMetadata","title","previous","next","Fragment","CssBaseline","frontmatter","description","excerpt","Container","maxWidth","Grid","container","item","xs","md","lg","Typography","variant","date","blogContent","html","tableOfContents","margin","spacing"],"mappings":"2OAiBeA,G,UAbS,SAAC,GAAgB,IAAdC,EAAc,EAAdA,QACnBC,EAAUC,IAChB,OACE,yBAEEC,UAAcF,EAAQG,eAAb,qBAGTC,wBAAyB,CAAEC,OAAQN,OAOnCE,EAAYK,aAAW,SAAAC,GAAK,MAAK,CACrCJ,eAAgB,CACdK,SAAU,SACVC,IAAK,Y,4DC+FIC,G,UAFEC,UAlGoD,SAAC,GAI9D,MAHJC,EAGI,EAHJA,KAIMZ,GADF,EAFJa,SAEI,EADJC,YAEgBb,KACVc,EAAOH,EAAKI,eACZC,GAAY,UAAAL,EAAKM,KAAKC,oBAAV,eAAwBC,QAAxB,QACSR,EAAnBS,SAAmBT,EAATU,KAElB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,IAAD,CACEJ,MAAOL,EAAKU,YAAYL,MACxBM,YAAaX,EAAKU,YAAYC,aAAeX,EAAKY,UAEpD,kBAAC,IAAD,CAAUV,UAAWA,IACrB,kBAACW,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAC7B,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKnC,UAAWF,EAAQoB,OACzCL,EAAKU,YAAYL,OAEpB,kBAACgB,EAAA,EAAD,CAAYlC,UAAWF,EAAQsC,KAAMD,QAAQ,aAC1CtB,EAAKU,YAAYa,MAEpB,yBACEpC,UAAWF,EAAQuC,YACnBnC,wBAAyB,CAAEC,OAAQU,EAAKyB,SAI5C,kBAACV,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAC7B,kBAAC,EAAD,CAAiBpC,QAASa,EAAKI,eAAeyB,uBAkEjC,cAwCnBxC,EAAYK,aAAW,SAAAC,GAAK,MAAK,CACrCa,MAAO,CACLsB,OAAQnC,EAAMoC,QAAQ,EAAG,EAAG,EAAG,IAEjCL,KAAM,CACJI,OAAQnC,EAAMoC,QAAQ,EAAG,EAAG,EAAG,IAEjCJ,YAAa","file":"component---src-templates-blog-post-tsx-f6be6c3ec613076e81b6.js","sourcesContent":["import { makeStyles } from \"@material-ui/core\"\r\nimport React from \"react\"\r\nimport \"./style.scss\"\r\n\r\nconst TableOfContents = ({ content }) => {\r\n  const classes = useStyles()\r\n  return (\r\n    <div\r\n      // 스타일링을 위해서 클래스이름 부여 한다.\r\n      className={`${classes.tableOfContent} table-of-contents`}\r\n      // dangerouslySetInnerHTML는 보안 관점에서 위험하지만\r\n      // innerHTML을 사용하겠다는 뜻이다.\r\n      dangerouslySetInnerHTML={{ __html: content }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default TableOfContents\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  tableOfContent: {\r\n    position: \"sticky\",\r\n    top: \"75px\",\r\n  },\r\n}))\r\n","import React from \"react\"\r\nimport { graphql, Link, PageProps } from \"gatsby\"\r\nimport { BlogPostBySlugQuery } from \"../../graphql-types\"\r\nimport Bio from \"../components/bio\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport TableOfContents from \"../components/TableOfContents\"\r\nimport {\r\n  Container,\r\n  CssBaseline,\r\n  Grid,\r\n  makeStyles,\r\n  Typography,\r\n} from \"@material-ui/core\"\r\nimport MyAppBar from \"../components/my-app-bar\"\r\nimport \"./prism.scss\"\r\n\r\nconst BlogPostTemplate: React.FC<PageProps<BlogPostBySlugQuery>> = ({\r\n  data,\r\n  location,\r\n  pageContext,\r\n}) => {\r\n  const classes = useStyles()\r\n  const post = data.markdownRemark\r\n  const siteTitle = data.site.siteMetadata?.title || `Title`\r\n  const { previous, next } = data\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <SEO\r\n        title={post.frontmatter.title}\r\n        description={post.frontmatter.description || post.excerpt}\r\n      />\r\n      <MyAppBar siteTitle={siteTitle} />\r\n      <Container maxWidth=\"lg\">\r\n        <Grid container>\r\n          <Grid item xs={12} md={12} lg={8}>\r\n            <Typography variant=\"h1\" className={classes.title}>\r\n              {post.frontmatter.title}\r\n            </Typography>\r\n            <Typography className={classes.date} variant=\"subtitle1\">\r\n              {post.frontmatter.date}\r\n            </Typography>\r\n            <div\r\n              className={classes.blogContent}\r\n              dangerouslySetInnerHTML={{ __html: post.html }}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={12} lg={4}>\r\n            <TableOfContents content={data.markdownRemark.tableOfContents} />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </React.Fragment>\r\n    // <Layout location={location} title={siteTitle}>\r\n    //   <SEO\r\n    //     title={post.frontmatter.title}\r\n    //     description={post.frontmatter.description || post.excerpt}\r\n    //   />\r\n    //   <div className=\"blog-post-container\">\r\n    //     <div className=\"content\">\r\n    //       <article\r\n    //         className=\"blog-post\"\r\n    //         itemScope\r\n    //         itemType=\"http://schema.org/Article\"\r\n    //       >\r\n    //         <header>\r\n    //           <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\r\n    //           <p>{post.frontmatter.date}</p>\r\n    //         </header>\r\n    //         <section\r\n    //           dangerouslySetInnerHTML={{ __html: post.html }}\r\n    //           itemProp=\"articleBody\"\r\n    //         />\r\n\r\n    //         <hr />\r\n    //         <footer>\r\n    //           <Bio />\r\n    //         </footer>\r\n    //       </article>\r\n    //       <nav className=\"blog-post-nav\">\r\n    //         <ul\r\n    //           style={{\r\n    //             display: `flex`,\r\n    //             flexWrap: `wrap`,\r\n    //             justifyContent: `space-between`,\r\n    //             listStyle: `none`,\r\n    //             padding: 0,\r\n    //           }}\r\n    //         >\r\n    //           <li>\r\n    //             {previous && (\r\n    //               <Link to={previous.fields.slug} rel=\"prev\">\r\n    //                 ← {previous.frontmatter.title}\r\n    //               </Link>\r\n    //             )}\r\n    //           </li>\r\n    //           <li>\r\n    //             {next && (\r\n    //               <Link to={next.fields.slug} rel=\"next\">\r\n    //                 {next.frontmatter.title} →\r\n    //               </Link>\r\n    //             )}\r\n    //           </li>\r\n    //         </ul>\r\n    //       </nav>\r\n    //     </div>\r\n    //     <TableOfContents content={data.markdownRemark.tableOfContents} />\r\n    //   </div>\r\n    // </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogPostTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPostBySlug(\r\n    $id: String!\r\n    $previousPostId: String\r\n    $nextPostId: String\r\n  ) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    markdownRemark(id: { eq: $id }) {\r\n      id\r\n      excerpt(pruneLength: 160)\r\n      html\r\n      frontmatter {\r\n        title\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        description\r\n      }\r\n      tableOfContents(maxDepth: 3)\r\n    }\r\n    previous: markdownRemark(id: { eq: $previousPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n    next: markdownRemark(id: { eq: $nextPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\nconst useStyles = makeStyles(theme => ({\r\n  title: {\r\n    margin: theme.spacing(4, 0, 0, 0),\r\n  },\r\n  date: {\r\n    margin: theme.spacing(0, 0, 4, 0),\r\n  },\r\n  blogContent: {},\r\n}))\r\n"],"sourceRoot":""}