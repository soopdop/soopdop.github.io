{"version":3,"sources":["webpack:///./src/templates/category.tsx"],"names":["Category","data","pageContext","location","classes","useStyles","siteTitle","site","siteMetadata","title","category","allMarkdownRemark","edges","totalCount","tagHeader","Fragment","container","style","flexDirection","minHeight","item","flexGrow","maxWidth","xs","className","titleBox","categoryTitle","variant","subTitle","lgUp","selectedCategory","md","lg","postListContainer","map","node","frontmatter","fields","slug","key","onClick","setTimeout","navigate","postItemCard","postItemCardArea","gutterBottom","date","dangerouslySetInnerHTML","__html","description","excerpt","itemProp","mdDown","categoryList","pageQuery","makeStyles","theme","root","position","top","alignSelf","margin","spacing","padding","display","alignItems","overflow","whiteSpace","fontSize","breakpoints","down","textAlign"],"mappings":"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","file":"component---src-templates-category-tsx-88ab2ef66b1cc6299e4f.js","sourcesContent":["import {\n  AppBar,\n  Box,\n  Card,\n  CardActionArea,\n  Container,\n  CssBaseline,\n  Divider,\n  FormControl,\n  Grid,\n  Hidden,\n  IconButton,\n  InputBase,\n  InputLabel,\n  List,\n  ListItem,\n  MenuItem,\n  Paper,\n  Select,\n  Slide,\n  Toolbar,\n  Typography,\n  useScrollTrigger,\n} from \"@material-ui/core\"\nimport { graphql, PageProps } from \"gatsby\"\nimport { Link } from \"gatsby-theme-material-ui\"\nimport React from \"react\"\nimport { BlogIndexQuery } from \"../../graphql-types\"\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport MenuIcon from \"@material-ui/icons/Menu\"\nimport SearchIcon from \"@material-ui/icons/Search\"\nimport { createStyles, fade, Theme, makeStyles } from \"@material-ui/core/styles\"\nimport CategoryList from \"../components/CategoryList\"\nimport { navigate } from \"gatsby\"\nimport Fab from \"@material-ui/core/Fab\"\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\"\nimport Zoom from \"@material-ui/core/Zoom\"\nimport MyAppBar from \"../components/my-app-bar\"\nimport Footer from \"../components/footer\"\nimport CategorySelect from \"../components/CategorySelect\"\nimport { CategoryQuery, SitePageContext } from \"../../graphql-types\"\n\n// SitePageContext로부터 context를 이용해 전달한 값들의 type을 얻을 수 있다.\nconst Category: React.FC<PageProps<CategoryQuery, SitePageContext>> = ({\n  data,\n  location,\n  pageContext,\n}) => {\n  const classes = useStyles()\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { category } = pageContext // gatsby-node.js의 createPage에서 넣어준 카테고리 이름.\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } categorized as \"${category}\"`\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <SEO title=\"All posts\" />\n      <MyAppBar siteTitle={siteTitle} />\n      <Grid\n        container\n        style={{ flexDirection: \"column\", minHeight: \"calc(100vh - 75px)\" }}\n      >\n        <Grid item style={{ flexGrow: 1 }}>\n          <Container maxWidth=\"lg\">\n            <Grid container>\n              <Grid item xs={12}>\n                <Box className={classes.titleBox}>\n                  <Typography className={classes.categoryTitle} variant=\"h1\">\n                    {tagHeader}\n                  </Typography>\n                  <Typography className={classes.subTitle}>\n                    Create What You Want to Use.\n                  </Typography>\n                </Box>\n              </Grid>\n              <Hidden lgUp>\n                <Grid item xs={12}>\n                  <CategorySelect selectedCategory={category} />\n                </Grid>\n              </Hidden>\n              <Grid item xs={12} md={12} lg={9}>\n                <Grid container className={classes.postListContainer}>\n                  {edges.map(({ node }) => {\n                    const title = node.frontmatter.title || node.fields.slug\n                    return (\n                      <Grid item xs={12} key={node.fields.slug}>\n                        <Card\n                          variant=\"outlined\"\n                          onClick={() =>\n                            setTimeout(() => navigate(node.fields.slug), 300)\n                          }\n                          className={classes.postItemCard}\n                        >\n                          <CardActionArea className={classes.postItemCardArea}>\n                            <Typography gutterBottom variant=\"h2\">\n                              {title}\n                            </Typography>\n                            <small>{node.frontmatter.date}</small>\n                            <p\n                              dangerouslySetInnerHTML={{\n                                __html:\n                                  node.frontmatter.description || node.excerpt,\n                              }}\n                              itemProp=\"description\"\n                            />\n                          </CardActionArea>\n                        </Card>\n                      </Grid>\n                    )\n                  })}\n                </Grid>\n              </Grid>\n              <Hidden mdDown>\n                <Grid\n                  item\n                  xs={12}\n                  md={12}\n                  lg={3}\n                  className={classes.categoryList}\n                >\n                  <CategoryList selectedCategory={category} />\n                </Grid>\n              </Hidden>\n            </Grid>\n          </Container>\n        </Grid>\n        <Grid item>\n          <Footer />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  )\n  // return (\n  //   <Layout location={location} title={title}>\n  //     <SEO title={title} />\n  //     <h1>{tagHeader}</h1>\n  //     <ul>\n  //       {/* 각 카테고리에 해당하는 포스트의 목록을 출력한다. */}\n  //       {edges.map(({ node }) => {\n  //         const { slug } = node.fields\n  //         const { title } = node.frontmatter\n  //         return (\n  //           <li key={slug}>\n  //             <Link to={slug}>{title}</Link>\n  //           </li>\n  //         )\n  //       })}\n  //     </ul>\n  //     <Link to=\"/\">Go back to the homepage</Link>\n  //   </Layout>\n  // )\n}\n\nexport default Category\n\n// 쿼리의 argument인 $category는 page context로 전달 받는다.\nexport const pageQuery = graphql`\n  query Category($category: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { categories: { in: [$category] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  categoryList: {\n    position: \"sticky\",\n    top: \"75px\",\n    alignSelf: \"flex-start\",\n  },\n  postListContainer: {\n    margin: theme.spacing(0, 0, 7, 0),\n  },\n  postItemCardArea: {\n    padding: theme.spacing(3),\n  },\n  postItemCard: {\n    margin: theme.spacing(1, 0, 0, 0),\n  },\n  titleBox: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    padding: theme.spacing(7, 0),\n  },\n  categoryTitle: {\n    margin: theme.spacing(4, 0, 0, 0),\n    overflow: \"hidden\",\n    whiteSpace: \"normal\",\n    fontSize: \"48px\",\n    [theme.breakpoints.down(\"xs\")]: {\n      fontSize: \"36px\",\n    },\n    textAlign: \"center\",\n  },\n  subTitle: {\n    margin: theme.spacing(-1, 0, 0, 0),\n  },\n}))\n"],"sourceRoot":""}