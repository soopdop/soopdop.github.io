{"version":3,"sources":["webpack:///./src/templates/category.tsx"],"names":["Category","data","pageContext","location","classes","useStyles","siteTitle","site","siteMetadata","title","category","allMarkdownRemark","edges","totalCount","tagHeader","Fragment","container","style","flexDirection","minHeight","item","flexGrow","maxWidth","xs","className","titleBox","categoryTitle","variant","subTitle","lgUp","selectedCategory","md","lg","postListContainer","map","node","frontmatter","fields","slug","key","onClick","setTimeout","navigate","postItemCard","postItemCardArea","gutterBottom","date","dangerouslySetInnerHTML","__html","description","excerpt","itemProp","mdDown","categoryList","pageQuery","makeStyles","theme","root","position","top","alignSelf","margin","spacing","padding","display","alignItems","overflow","whiteSpace","fontSize","breakpoints","down","textAlign"],"mappings":"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","file":"component---src-templates-category-tsx-88ab2ef66b1cc6299e4f.js","sourcesContent":["import {\r\n  AppBar,\r\n  Box,\r\n  Card,\r\n  CardActionArea,\r\n  Container,\r\n  CssBaseline,\r\n  Divider,\r\n  FormControl,\r\n  Grid,\r\n  Hidden,\r\n  IconButton,\r\n  InputBase,\r\n  InputLabel,\r\n  List,\r\n  ListItem,\r\n  MenuItem,\r\n  Paper,\r\n  Select,\r\n  Slide,\r\n  Toolbar,\r\n  Typography,\r\n  useScrollTrigger,\r\n} from \"@material-ui/core\"\r\nimport { graphql, PageProps } from \"gatsby\"\r\nimport { Link } from \"gatsby-theme-material-ui\"\r\nimport React from \"react\"\r\nimport { BlogIndexQuery } from \"../../graphql-types\"\r\nimport Bio from \"../components/bio\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport MenuIcon from \"@material-ui/icons/Menu\"\r\nimport SearchIcon from \"@material-ui/icons/Search\"\r\nimport { createStyles, fade, Theme, makeStyles } from \"@material-ui/core/styles\"\r\nimport CategoryList from \"../components/CategoryList\"\r\nimport { navigate } from \"gatsby\"\r\nimport Fab from \"@material-ui/core/Fab\"\r\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\"\r\nimport Zoom from \"@material-ui/core/Zoom\"\r\nimport MyAppBar from \"../components/my-app-bar\"\r\nimport Footer from \"../components/footer\"\r\nimport CategorySelect from \"../components/CategorySelect\"\r\nimport { CategoryQuery, SitePageContext } from \"../../graphql-types\"\r\n\r\n// SitePageContext로부터 context를 이용해 전달한 값들의 type을 얻을 수 있다.\r\nconst Category: React.FC<PageProps<CategoryQuery, SitePageContext>> = ({\r\n  data,\r\n  location,\r\n  pageContext,\r\n}) => {\r\n  const classes = useStyles()\r\n  const siteTitle = data.site.siteMetadata?.title || `Title`\r\n  const { category } = pageContext // gatsby-node.js의 createPage에서 넣어준 카테고리 이름.\r\n  const { edges, totalCount } = data.allMarkdownRemark\r\n  const tagHeader = `${totalCount} post${\r\n    totalCount === 1 ? \"\" : \"s\"\r\n  } categorized as \"${category}\"`\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <SEO title=\"All posts\" />\r\n      <MyAppBar siteTitle={siteTitle} />\r\n      <Grid\r\n        container\r\n        style={{ flexDirection: \"column\", minHeight: \"calc(100vh - 75px)\" }}\r\n      >\r\n        <Grid item style={{ flexGrow: 1 }}>\r\n          <Container maxWidth=\"lg\">\r\n            <Grid container>\r\n              <Grid item xs={12}>\r\n                <Box className={classes.titleBox}>\r\n                  <Typography className={classes.categoryTitle} variant=\"h1\">\r\n                    {tagHeader}\r\n                  </Typography>\r\n                  <Typography className={classes.subTitle}>\r\n                    Create What You Want to Use.\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n              <Hidden lgUp>\r\n                <Grid item xs={12}>\r\n                  <CategorySelect selectedCategory={category} />\r\n                </Grid>\r\n              </Hidden>\r\n              <Grid item xs={12} md={12} lg={9}>\r\n                <Grid container className={classes.postListContainer}>\r\n                  {edges.map(({ node }) => {\r\n                    const title = node.frontmatter.title || node.fields.slug\r\n                    return (\r\n                      <Grid item xs={12} key={node.fields.slug}>\r\n                        <Card\r\n                          variant=\"outlined\"\r\n                          onClick={() =>\r\n                            setTimeout(() => navigate(node.fields.slug), 300)\r\n                          }\r\n                          className={classes.postItemCard}\r\n                        >\r\n                          <CardActionArea className={classes.postItemCardArea}>\r\n                            <Typography gutterBottom variant=\"h2\">\r\n                              {title}\r\n                            </Typography>\r\n                            <small>{node.frontmatter.date}</small>\r\n                            <p\r\n                              dangerouslySetInnerHTML={{\r\n                                __html:\r\n                                  node.frontmatter.description || node.excerpt,\r\n                              }}\r\n                              itemProp=\"description\"\r\n                            />\r\n                          </CardActionArea>\r\n                        </Card>\r\n                      </Grid>\r\n                    )\r\n                  })}\r\n                </Grid>\r\n              </Grid>\r\n              <Hidden mdDown>\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  md={12}\r\n                  lg={3}\r\n                  className={classes.categoryList}\r\n                >\r\n                  <CategoryList selectedCategory={category} />\r\n                </Grid>\r\n              </Hidden>\r\n            </Grid>\r\n          </Container>\r\n        </Grid>\r\n        <Grid item>\r\n          <Footer />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n  // return (\r\n  //   <Layout location={location} title={title}>\r\n  //     <SEO title={title} />\r\n  //     <h1>{tagHeader}</h1>\r\n  //     <ul>\r\n  //       {/* 각 카테고리에 해당하는 포스트의 목록을 출력한다. */}\r\n  //       {edges.map(({ node }) => {\r\n  //         const { slug } = node.fields\r\n  //         const { title } = node.frontmatter\r\n  //         return (\r\n  //           <li key={slug}>\r\n  //             <Link to={slug}>{title}</Link>\r\n  //           </li>\r\n  //         )\r\n  //       })}\r\n  //     </ul>\r\n  //     <Link to=\"/\">Go back to the homepage</Link>\r\n  //   </Layout>\r\n  // )\r\n}\r\n\r\nexport default Category\r\n\r\n// 쿼리의 argument인 $category는 page context로 전달 받는다.\r\nexport const pageQuery = graphql`\r\n  query Category($category: String) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { categories: { in: [$category] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          excerpt\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            title\r\n            description\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  categoryList: {\r\n    position: \"sticky\",\r\n    top: \"75px\",\r\n    alignSelf: \"flex-start\",\r\n  },\r\n  postListContainer: {\r\n    margin: theme.spacing(0, 0, 7, 0),\r\n  },\r\n  postItemCardArea: {\r\n    padding: theme.spacing(3),\r\n  },\r\n  postItemCard: {\r\n    margin: theme.spacing(1, 0, 0, 0),\r\n  },\r\n  titleBox: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(7, 0),\r\n  },\r\n  categoryTitle: {\r\n    margin: theme.spacing(4, 0, 0, 0),\r\n    overflow: \"hidden\",\r\n    whiteSpace: \"normal\",\r\n    fontSize: \"48px\",\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      fontSize: \"36px\",\r\n    },\r\n    textAlign: \"center\",\r\n  },\r\n  subTitle: {\r\n    margin: theme.spacing(-1, 0, 0, 0),\r\n  },\r\n}))\r\n"],"sourceRoot":""}