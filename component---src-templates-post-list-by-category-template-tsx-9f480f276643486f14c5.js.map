{"version":3,"sources":["webpack:///./src/templates/PostListByCategoryTemplate.tsx"],"names":["PostListByCategory","data","pageContext","classes","useStyles","siteTitle","site","siteMetadata","title","category","allMarkdownRemark","edges","totalCount","tagHeader","numPages","currentPage","container","item","xs","className","titleBox","categoryTitle","variant","subTitle","mdUp","selectedCategory","md","lg","postListContainer","map","node","key","fields","slug","xsDown","post","smUp","paginationContainer","smDown","size","count","page","color","onChange","_event","navigate","kebabCase","categoryList","pageQuery","makeStyles","theme","position","marginTop","top","alignSelf","margin","spacing","display","flexDirection","alignItems","padding","overflow","whiteSpace","fontSize","breakpoints","down","textAlign","justifyContent"],"mappings":"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","file":"component---src-templates-post-list-by-category-template-tsx-9f480f276643486f14c5.js","sourcesContent":["import { Box, Grid, Hidden, Typography } from \"@material-ui/core\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport Pagination from \"@material-ui/lab/Pagination\"\nimport { graphql, navigate, PageProps } from \"gatsby\"\nimport React from \"react\"\nimport { CategoryQuery, SitePageContext } from \"../../graphql-types\"\nimport CategoryList from \"../components/CategoryList\"\nimport CategorySelect from \"../components/CategorySelect\"\nimport Layout from \"../components/Layout\"\nimport PostCard from \"../components/PostCard\"\nimport PostListItem from \"../components/PostListItem\"\nimport SEO from \"../components/seo\"\nimport kebabCase from \"lodash/kebabCase\"\n\nexport type PostType = CategoryQuery[\"allMarkdownRemark\"][\"edges\"][0][\"node\"]\n\n// SitePageContext로부터 context를 이용해 전달한 값들의 type을 얻을 수 있다.\nconst PostListByCategory: React.FC<PageProps<\n  CategoryQuery,\n  SitePageContext\n>> = ({ data, pageContext }) => {\n  const classes = useStyles()\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { category } = pageContext // gatsby-node.js의 createPage에서 넣어준 카테고리 이름.\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } categorized as \"${category}\"`\n  const { numPages, currentPage } = pageContext\n\n  return (\n    <Layout siteTitle={siteTitle}>\n      <SEO title={category} />\n      <Grid container>\n        <Grid item xs={12}>\n          <Box className={classes.titleBox}>\n            <Typography className={classes.categoryTitle} variant=\"h1\">\n              {tagHeader}\n            </Typography>\n            <Typography className={classes.subTitle}>\n              Create What You Want to Use.\n            </Typography>\n          </Box>\n        </Grid>\n        <Hidden mdUp>\n          <Grid item xs={12}>\n            <CategorySelect selectedCategory={category} />\n          </Grid>\n        </Hidden>\n        <Grid item xs={12} md={9} lg={8}>\n          <Grid container className={classes.postListContainer}>\n            {edges.map(({ node }) => {\n              return (\n                <Grid item xs={12} key={node.fields.slug}>\n                  <Hidden xsDown>\n                    <PostListItem post={node} />\n                  </Hidden>\n                  <Hidden smUp>\n                    <PostCard post={node} />\n                  </Hidden>\n                </Grid>\n              )\n            })}\n          </Grid>\n          <Box className={classes.paginationContainer}>\n            <Hidden smDown>\n              <Pagination\n                size=\"large\"\n                count={numPages}\n                page={currentPage}\n                variant=\"outlined\"\n                color=\"primary\"\n                onChange={(_event, page) => {\n                  if (page === 1) {\n                    navigate(`/categories/${kebabCase(category)}/`)\n                  } else {\n                    navigate(`/categories/${kebabCase(category)}/page/${page}`)\n                  }\n                }}\n              />\n            </Hidden>\n            <Hidden mdUp>\n              <Pagination\n                size=\"medium\"\n                count={numPages}\n                page={currentPage}\n                variant=\"outlined\"\n                color=\"primary\"\n                onChange={(_event, page) => {\n                  if (page === 1) {\n                    navigate(`/categories/${kebabCase(category)}/`)\n                  } else {\n                    navigate(`/categories/${kebabCase(category)}/page/${page}`)\n                  }\n                }}\n              />\n            </Hidden>\n          </Box>\n        </Grid>\n        <Hidden smDown>\n          <Grid item xs={12} md={3} lg={4} className={classes.categoryList}>\n            <CategoryList selectedCategory={category} />\n          </Grid>\n        </Hidden>\n      </Grid>\n    </Layout>\n  )\n}\n\nexport default PostListByCategory\n\n// 쿼리의 argument인 $category는 page context로 전달 받는다.\nexport const pageQuery = graphql`\n  query Category($category: String, $skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { categories: { in: [$category] } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 500)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            thumbnail {\n              childImageSharp {\n                fluid(maxWidth: 600, quality: 100) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nconst useStyles = makeStyles(theme => ({\n  categoryList: {\n    position: \"sticky\",\n    marginTop: \"20px\",\n    top: \"0px\",\n    alignSelf: \"flex-start\",\n  },\n  postListContainer: {\n    margin: theme.spacing(0, 0, 7, 0),\n  },\n  titleBox: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 0, 7, 0),\n  },\n  categoryTitle: {\n    margin: theme.spacing(4, 0, 0, 0),\n    overflow: \"hidden\",\n    whiteSpace: \"normal\",\n    fontSize: \"48px\",\n    [theme.breakpoints.down(\"xs\")]: {\n      fontSize: \"36px\",\n    },\n    textAlign: \"center\",\n  },\n  subTitle: {\n    margin: theme.spacing(-1, 0, 0, 0),\n  },\n  paginationContainer: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin: theme.spacing(0, 0, 7, 0),\n    \"& button\": {\n      fontSize: \"14px\",\n      [theme.breakpoints.down(\"xs\")]: {\n        fontSize: \"12px\",\n      },\n    },\n  },\n}))\n"],"sourceRoot":""}