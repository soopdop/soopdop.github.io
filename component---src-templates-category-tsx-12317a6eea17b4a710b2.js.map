{"version":3,"sources":["webpack:///./src/templates/Category.tsx"],"names":["Category","data","pageContext","classes","useStyles","siteTitle","site","siteMetadata","title","category","allMarkdownRemark","edges","totalCount","tagHeader","container","item","xs","className","titleBox","categoryTitle","variant","subTitle","lgUp","selectedCategory","md","lg","postListContainer","map","node","frontmatter","fields","slug","key","onClick","setTimeout","navigate","postItemCard","postItemCardArea","gutterBottom","date","dangerouslySetInnerHTML","__html","description","excerpt","itemProp","mdDown","categoryList","pageQuery","makeStyles","theme","root","flexGrow","position","top","alignSelf","margin","spacing","padding","display","flexDirection","alignItems","overflow","whiteSpace","fontSize","breakpoints","down","textAlign"],"mappings":"4FAAA,0NA4GeA,UA1FuD,SAAC,GAGjE,MAFJC,EAEI,EAFJA,KACAC,EACI,EADJA,YAEMC,EAAUC,IACVC,GAAY,UAAAJ,EAAKK,KAAKC,oBAAV,eAAwBC,QAAxB,QACVC,EAAaP,EAAbO,SAHJ,EAI0BR,EAAKS,kBAA3BC,EAJJ,EAIIA,MAAOC,EAJX,EAIWA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,oBAEKH,EAFL,IAGf,OACE,kBAAC,IAAD,CAAQJ,UAAWA,GACjB,kBAAC,IAAD,CAAKG,MAAOC,IACZ,kBAAC,IAAD,CAAMK,WAAS,GACb,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAKC,UAAWd,EAAQe,UACtB,kBAAC,IAAD,CAAYD,UAAWd,EAAQgB,cAAeC,QAAQ,MACnDP,GAEH,kBAAC,IAAD,CAAYI,UAAWd,EAAQkB,UAA/B,kCAKJ,kBAAC,IAAD,CAAQC,MAAI,GACV,kBAAC,IAAD,CAAMP,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAgBO,iBAAkBd,MAGtC,kBAAC,IAAD,CAAMM,MAAI,EAACC,GAAI,GAAIQ,GAAI,GAAIC,GAAI,GAC7B,kBAAC,IAAD,CAAMX,WAAS,EAACG,UAAWd,EAAQuB,mBAChCf,EAAMgB,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACNpB,EAAQoB,EAAKC,YAAYrB,OAASoB,EAAKE,OAAOC,KACpD,OACE,kBAAC,IAAD,CAAMhB,MAAI,EAACC,GAAI,GAAIgB,IAAKJ,EAAKE,OAAOC,MAClC,kBAAC,IAAD,CACEX,QAAQ,WACRa,QAAS,kBACPC,YAAW,kBAAMC,mBAASP,EAAKE,OAAOC,QAAO,MAE/Cd,UAAWd,EAAQiC,cAEnB,kBAAC,IAAD,CAAgBnB,UAAWd,EAAQkC,kBACjC,kBAAC,IAAD,CAAYC,cAAY,EAAClB,QAAQ,MAC9BZ,GAEH,+BAAQoB,EAAKC,YAAYU,MACzB,uBACEC,wBAAyB,CACvBC,OAAQb,EAAKC,YAAYa,aAAed,EAAKe,SAE/CC,SAAS,wBASzB,kBAAC,IAAD,CAAQC,QAAM,GACZ,kBAAC,IAAD,CAAM9B,MAAI,EAACC,GAAI,GAAIQ,GAAI,GAAIC,GAAI,EAAGR,UAAWd,EAAQ2C,cACnD,kBAAC,IAAD,CAAcvB,iBAAkBd,SA8BrC,IAAMsC,EAAY,aA8BnB3C,EAAY4C,aAAW,SAAAC,GAAK,YAAK,CACrCC,KAAM,CACJC,SAAU,GAEZL,aAAc,CACZM,SAAU,SACVC,IAAK,OACLC,UAAW,cAEb5B,kBAAmB,CACjB6B,OAAQN,EAAMO,QAAQ,EAAG,EAAG,EAAG,IAEjCnB,iBAAkB,CAChBoB,QAASR,EAAMO,QAAQ,IAEzBpB,aAAc,CACZmB,OAAQN,EAAMO,QAAQ,EAAG,EAAG,EAAG,IAEjCtC,SAAU,CACRwC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZH,QAASR,EAAMO,QAAQ,EAAG,IAE5BrC,eAAa,GACXoC,OAAQN,EAAMO,QAAQ,EAAG,EAAG,EAAG,GAC/BK,SAAU,SACVC,WAAY,SACZC,SAAU,QAJC,EAKVd,EAAMe,YAAYC,KAAK,OAAQ,CAC9BF,SAAU,QAND,EAQXG,UAAW,SARA,GAUb7C,SAAU,CACRkC,OAAQN,EAAMO,SAAS,EAAG,EAAG,EAAG","file":"component---src-templates-category-tsx-12317a6eea17b4a710b2.js","sourcesContent":["import {\n  Box,\n  Card,\n  CardActionArea,\n  Grid,\n  Hidden,\n  Typography,\n} from \"@material-ui/core\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport { graphql, navigate, PageProps } from \"gatsby\"\nimport React from \"react\"\nimport { CategoryQuery, SitePageContext } from \"../../graphql-types\"\nimport CategoryList from \"../components/CategoryList\"\nimport CategorySelect from \"../components/CategorySelect\"\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/seo\"\n\n// SitePageContext로부터 context를 이용해 전달한 값들의 type을 얻을 수 있다.\nconst Category: React.FC<PageProps<CategoryQuery, SitePageContext>> = ({\n  data,\n  pageContext,\n}) => {\n  const classes = useStyles()\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { category } = pageContext // gatsby-node.js의 createPage에서 넣어준 카테고리 이름.\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } categorized as \"${category}\"`\n  return (\n    <Layout siteTitle={siteTitle}>\n      <SEO title={category} />\n      <Grid container>\n        <Grid item xs={12}>\n          <Box className={classes.titleBox}>\n            <Typography className={classes.categoryTitle} variant=\"h1\">\n              {tagHeader}\n            </Typography>\n            <Typography className={classes.subTitle}>\n              Create What You Want to Use.\n            </Typography>\n          </Box>\n        </Grid>\n        <Hidden lgUp>\n          <Grid item xs={12}>\n            <CategorySelect selectedCategory={category} />\n          </Grid>\n        </Hidden>\n        <Grid item xs={12} md={12} lg={9}>\n          <Grid container className={classes.postListContainer}>\n            {edges.map(({ node }) => {\n              const title = node.frontmatter.title || node.fields.slug\n              return (\n                <Grid item xs={12} key={node.fields.slug}>\n                  <Card\n                    variant=\"outlined\"\n                    onClick={() =>\n                      setTimeout(() => navigate(node.fields.slug), 300)\n                    }\n                    className={classes.postItemCard}\n                  >\n                    <CardActionArea className={classes.postItemCardArea}>\n                      <Typography gutterBottom variant=\"h2\">\n                        {title}\n                      </Typography>\n                      <small>{node.frontmatter.date}</small>\n                      <p\n                        dangerouslySetInnerHTML={{\n                          __html: node.frontmatter.description || node.excerpt,\n                        }}\n                        itemProp=\"description\"\n                      />\n                    </CardActionArea>\n                  </Card>\n                </Grid>\n              )\n            })}\n          </Grid>\n        </Grid>\n        <Hidden mdDown>\n          <Grid item xs={12} md={12} lg={3} className={classes.categoryList}>\n            <CategoryList selectedCategory={category} />\n          </Grid>\n        </Hidden>\n      </Grid>\n    </Layout>\n  )\n  // return (\n  //   <Layout location={location} title={title}>\n  //     <SEO title={title} />\n  //     <h1>{tagHeader}</h1>\n  //     <ul>\n  //       {/* 각 카테고리에 해당하는 포스트의 목록을 출력한다. */}\n  //       {edges.map(({ node }) => {\n  //         const { slug } = node.fields\n  //         const { title } = node.frontmatter\n  //         return (\n  //           <li key={slug}>\n  //             <Link to={slug}>{title}</Link>\n  //           </li>\n  //         )\n  //       })}\n  //     </ul>\n  //     <Link to=\"/\">Go back to the homepage</Link>\n  //   </Layout>\n  // )\n}\n\nexport default Category\n\n// 쿼리의 argument인 $category는 page context로 전달 받는다.\nexport const pageQuery = graphql`\n  query Category($category: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { categories: { in: [$category] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  categoryList: {\n    position: \"sticky\",\n    top: \"75px\",\n    alignSelf: \"flex-start\",\n  },\n  postListContainer: {\n    margin: theme.spacing(0, 0, 7, 0),\n  },\n  postItemCardArea: {\n    padding: theme.spacing(3),\n  },\n  postItemCard: {\n    margin: theme.spacing(1, 0, 0, 0),\n  },\n  titleBox: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    padding: theme.spacing(7, 0),\n  },\n  categoryTitle: {\n    margin: theme.spacing(4, 0, 0, 0),\n    overflow: \"hidden\",\n    whiteSpace: \"normal\",\n    fontSize: \"48px\",\n    [theme.breakpoints.down(\"xs\")]: {\n      fontSize: \"36px\",\n    },\n    textAlign: \"center\",\n  },\n  subTitle: {\n    margin: theme.spacing(-1, 0, 0, 0),\n  },\n}))\n"],"sourceRoot":""}