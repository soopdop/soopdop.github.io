{"version":3,"sources":["webpack:///./src/components/table-of-contents.tsx","webpack:///./src/templates/blog-post.tsx"],"names":["TableOfContents","content","className","dangerouslySetInnerHTML","__html","pageQuery","BlogPostTemplate","data","location","post","markdownRemark","siteTitle","site","siteMetadata","title","previous","next","frontmatter","description","excerpt","itemScope","itemType","itemProp","date","html","style","display","flexWrap","justifyContent","listStyle","padding","to","fields","slug","rel","tableOfContents"],"mappings":"qNAceA,EAZS,SAAC,GAAgB,IAAdC,EAAc,EAAdA,QACzB,OACE,yBAEEC,UAAU,mBAGVC,wBAAyB,CAAEC,OAAQH,MCqE5BI,GAFEC,UApEoD,SAAC,GAG9D,MAFJC,EAEI,EAFJA,KACAC,EACI,EADJA,SAEMC,EAAOF,EAAKG,eACZC,GAAY,UAAAJ,EAAKK,KAAKC,oBAAV,eAAwBC,QAAxB,QACVC,EAAmBR,EAAnBQ,SAAUC,EAAST,EAATS,KAElB,OACE,kBAAC,IAAD,CAAQR,SAAUA,EAAUM,MAAOH,GACjC,kBAAC,IAAD,CACEG,MAAOL,EAAKQ,YAAYH,MACxBI,YAAaT,EAAKQ,YAAYC,aAAeT,EAAKU,UAEpD,yBAAKjB,UAAU,uBACb,yBAAKA,UAAU,WACb,6BACEA,UAAU,YACVkB,WAAS,EACTC,SAAS,6BAET,gCACE,wBAAIC,SAAS,YAAYb,EAAKQ,YAAYH,OAC1C,2BAAIL,EAAKQ,YAAYM,OAEvB,6BACEpB,wBAAyB,CAAEC,OAAQK,EAAKe,MACxCF,SAAS,gBAGX,6BACA,gCACE,kBAAC,IAAD,QAGJ,yBAAKpB,UAAU,iBACb,wBACEuB,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGX,4BACGf,GACC,kBAAC,OAAD,CAAMgB,GAAIhB,EAASiB,OAAOC,KAAMC,IAAI,QAApC,KACKnB,EAASE,YAAYH,QAI9B,4BACGE,GACC,kBAAC,OAAD,CAAMe,GAAIf,EAAKgB,OAAOC,KAAMC,IAAI,QAC7BlB,EAAKC,YAAYH,MADpB,UAQV,kBAAC,EAAD,CAAiBb,QAASM,EAAKG,eAAeyB,qBAQ7B","file":"component---src-templates-blog-post-tsx-f6ce8d02c70b979b7774.js","sourcesContent":["import React from \"react\"\r\n\r\nconst TableOfContents = ({ content }) => {\r\n  return (\r\n    <div\r\n      // 스타일링을 위해서 클래스이름 부여 한다.\r\n      className=\"table-of-content\"\r\n      // dangerouslySetInnerHTML는 보안 관점에서 위험하지만\r\n      // innerHTML을 사용하겠다는 뜻이다.\r\n      dangerouslySetInnerHTML={{ __html: content }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default TableOfContents\r\n","import React from \"react\"\nimport { graphql, Link, PageProps } from \"gatsby\"\nimport { BlogPostBySlugQuery } from \"../../graphql-types\"\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport TableOfContents from \"../components/table-of-contents\"\n\nconst BlogPostTemplate: React.FC<PageProps<BlogPostBySlugQuery>> = ({\n  data,\n  location,\n}) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <div className=\"blog-post-container\">\n        <div className=\"content\">\n          <article\n            className=\"blog-post\"\n            itemScope\n            itemType=\"http://schema.org/Article\"\n          >\n            <header>\n              <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n              <p>{post.frontmatter.date}</p>\n            </header>\n            <section\n              dangerouslySetInnerHTML={{ __html: post.html }}\n              itemProp=\"articleBody\"\n            />\n\n            <hr />\n            <footer>\n              <Bio />\n            </footer>\n          </article>\n          <nav className=\"blog-post-nav\">\n            <ul\n              style={{\n                display: `flex`,\n                flexWrap: `wrap`,\n                justifyContent: `space-between`,\n                listStyle: `none`,\n                padding: 0,\n              }}\n            >\n              <li>\n                {previous && (\n                  <Link to={previous.fields.slug} rel=\"prev\">\n                    ← {previous.frontmatter.title}\n                  </Link>\n                )}\n              </li>\n              <li>\n                {next && (\n                  <Link to={next.fields.slug} rel=\"next\">\n                    {next.frontmatter.title} →\n                  </Link>\n                )}\n              </li>\n            </ul>\n          </nav>\n        </div>\n        <TableOfContents content={data.markdownRemark.tableOfContents} />\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n      tableOfContents\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}