{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/12/03/rest-and-spread-in-javascript/","result":{"data":{"site":{"siteMetadata":{"title":"Harry Park's Blog"}},"markdownRemark":{"id":"30de7482-a78d-5a0a-a516-c6f923b80e7a","excerpt":"이 포스트는 JavaScript의 ES6에 추가된  기호를 사용하는 두가지 경우인 Spread Operator와 Rest Parameter…","html":"<!--\n참고문서:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\nhttps://medium.com/javascript-in-plain-english/es6-spread-parameter-vs-rest-operator-5e3c924c4e1f\n-->\n<p>이 포스트는 JavaScript의 ES6에 추가된 <code class=\"language-text\">...</code> 기호를 사용하는 두가지 경우인 Spread Operator와 Rest Parameter를 쉽게 설명하기 위해서 작성되었다. 이미 익숙한 사람들에게는 이 것을 굳이 쉽게 설명해야할 필요성이 있을까 의문이 들 수도 있겠지만, 복잡한 실무 코드로 처음 접하는 사람들에게는 충분히 헷갈릴만한 문법이다.</p>\n<h4>만만한 Spread로 시작해 보자</h4>\n<p>spread operator는 iterable 객체를 함수의 인자 혹은 배열 literal의 요소로 확장한다. 조금 더 쉽게 말하면 배열과 같은 복수개의 데이터를 가진 데이터형을 <code class=\"language-text\">, , ,</code>으로 구분되는 여러개의 요소로 펼치는(spread) 곳에 사용한다는 것이다.</p>\n<h5>Spread operator: iterable 객체를 함수의 인자로 펼쳐서 호출한다</h5>\n<p>대표적인 사용법 중 하나는 함수의 인자로 펼쳐서 호출하는 것이다. 머리 속에서 각 배열 요소가 <code class=\"language-text\">, , ,</code> 으로 펼쳐진 모습을 상상하면 함수의 각 인자로 들어가는 것을 상상할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Map</code>과 <code class=\"language-text\">Set</code> 또한 iterable 객체이므로 다음과 같이 확장이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>map<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>set<span class=\"token punctuation\">)</span></code></pre></div>\n<h5>Spread: 배열 literal에 다른 배열의 요소로 펼치기 위해서 사용한다</h5>\n<p><code class=\"language-text\">[1, 2, 3, 4]</code> 와 같은 형태를 array literal이라고 한다. 배열을 정의하기 위해서 익숙하게 사용하는 것이다. spread는 이 array literal에 다른 배열의 요소를 넣기 위해서 흔하게 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 배열의 얕은 복사.</span>\n<span class=\"token keyword\">const</span> arr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 요소 추가.</span></code></pre></div>\n<p>위의 두 예제도 머리 속에서 각 배열 요소가 <code class=\"language-text\">, , ,</code> 으로 펼쳐진 모습을 상상하면 이해하기 쉽다. <code class=\"language-text\">arr2</code>는 <code class=\"language-text\">arr</code>과 동일한 배열 요소를 가질 것이고, <code class=\"language-text\">arr3</code>은 가장 뒤쪽에 요소가 하나 추가된다.</p>\n<h5>Spread: 배열 literal에 다른 배열의 요소로 펼치는 것은 상당히 많이 활용된다</h5>\n<p>위의 사용법은 array literal에 요소 spread operator의 존재의 이유라고 말할 수 있을 정도로 많이 활용된다. 그 이유는 대부분의 경우, 사용법도 헷갈리는 배열 조작 함수들을 대체할 수있기 때문이다. <code class=\"language-text\">push()</code>, <code class=\"language-text\">splice()</code>, <code class=\"language-text\">concat()</code> , <code class=\"language-text\">unshift()</code></p>\n<ul>\n<li>배열 복사하기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> arr <span class=\"token comment\">// 이것을 복사라고 말하는 사람은 경계 대상 1호.</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 배열 복사. 새로운 배열의 생성하되 그 요소들을 arr을 펼쳐서 새로운 배열의 요소로써 채우는 것.</span></code></pre></div>\n<ul>\n<li>여러개의 베열을 연결한 새로운 배열 생성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 두 배열의 요소를 합친 새로운 배열 생성</span></code></pre></div>\n<ul>\n<li>배열의 중간에 다른 배열 요소 추가하기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 중간에 다른 배열의 요소를 추가하여 새로운 배열 생성</span></code></pre></div>\n<h5>Spread: 객체 literal에 다른 객체의 property들을 펼치기 위해서 사용</h5>\n<p>이 것 또한 spread operator 정말 많이 사용되는 이유 중 하나이다. 위의 배열의 사용 예처럼 객체 또한 복사 및 연결 등의 조작이 가능하다.</p>\n<p>그리고 현재를 기준으로한 하나의 중요한 용법으로 Redux의 <a href=\"https://redux.js.org/recipes/structuring-reducers/immutable-update-patterns\">Immutable Update Patterns</a>을 보면 <code class=\"language-text\">Object.assign()</code>을 대체하여 훨씬 깔끔한 방식으로 객체를 복사하고 복사한 객체에 필요한 property를 수정하는 것을 볼 수 있다. Redux에서는 기존의 state object를 조작하는 매번 새로운 state를 생성하는 <code class=\"language-text\">immutable update</code> 방식을 사용하고 있기 때문이다.</p>\n<ul>\n<li>객체의 복사</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>obj <span class=\"token punctuation\">}</span> <span class=\"token comment\">// obj객체를 펼쳐서 새로운 객체를 생성한다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">===</span> obj1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false, 같은 요소를 가졌지만 새로 생성된 객체이므로 서로 다른 객체이다.</span></code></pre></div>\n<ul>\n<li>객체의 연결</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>obj<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>obj1 <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 두 객체를 펼쳐서 새로운 객체를 생성한다.</span></code></pre></div>\n<ul>\n<li>객체에 새로운 property 추가, 기존 property 수정</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>obj<span class=\"token punctuation\">,</span>\n  c<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 기존의 property를 한 번더 정의해줌으로써 property를 수정할 수 있다.</span>\n  d<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 새로운 property를 추가할 수 있다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>이제 Rest Parameter을 알아보자</h4>\n<p>rest parameter는 이름 그대로 함수에서 인자를 받을 때 <code class=\"language-text\">나머지(rest)</code>로 뭉쳐서 받을 수 있게 해주는 기호이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"a\",\"b\",\"c\"]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5>세상에 바보 같은 질문은 없다</h5>\n<p>참으로 단순한 예제이지만 위의 예제를 처음 접하면 헷갈리는 이유가 바로 spread operator로 착각할 수 있는 소지가 다분하기 때문이다. <code class=\"language-text\">...rest</code>가 spread operator라고 생각해도 어느정도는 말이 된다는 느낌 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 혹시 여기서 rest를 b, c, d로 각각 spread해 주는 것인가?</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>다시 보니 더 바보같다. 함수 내에서 <code class=\"language-text\">b</code>,<code class=\"language-text\">c</code>,<code class=\"language-text\">d</code>는 아예 선언되지 않았기에 컴파일 에러(eslint/tslint)가 발생한다. 또한 애초에 저런 문법을 사용할 일말의 이유가 없는데 <code class=\"language-text\">b</code>,<code class=\"language-text\">c</code>,<code class=\"language-text\">d</code>를 각각 사용하려면 rest에 나머지 인자를 몰아서 받을 필요도 없기 때문이다.</p>\n<h5>진짜 헷갈림을 유발하는 것은 따로 있다</h5>\n<p>사실 위의 바보 같은 예제 말고 진짜 헷갈림을 유발하는 곳은 따로 있다. 이름과 행동이 불일치하게도 rest parameter가 꼭 함수의 인자에서만 쓰이는게 아니라는 점이다. 응?! 다음 예제를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>firstElement<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>firstElement<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"a\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"b\", \"c\", \"d\"]</span></code></pre></div>\n<p>위 구문을 처음 접하면 그야말로 혼돈의 카오스다. 도대체 이곳에서 사용된 <code class=\"language-text\">...</code>은 뭐란 말인가?</p>\n<p>위 예제는 rest parameter가 destructing과 함께 쓰인 경우이다. <code class=\"language-text\">rest</code>가 원래 있었던 것은 아니니 spread operator가 아님을 알 수 있고, <code class=\"language-text\">&quot;a&quot;</code>를 제외한 <code class=\"language-text\">나머지(rest)</code>를 담는 rest parameter임을 알 수 있다. 알고보니 별 것 아니었다는 생각을 하지만 처음 접했을 때는 충분히 혼란스러웠다.</p>\n<p>사실 위 예제는 실무에서 매우 유용한 것 중의 하나이다. 어떤 객체에서 원하는 property를 없앤 새로운 객체를 생성할 때 사용하면 안성맞춤이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> c<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>obj2 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj <span class=\"token comment\">// a와 b property만 가진 새로운 객체 obj2를 생성한다.</span></code></pre></div>\n<p>위 예제에서는 <code class=\"language-text\">c</code> property를 제거하고 <code class=\"language-text\">a</code>와 <code class=\"language-text\">b</code> property만을 가진 새로운 객체 <code class=\"language-text\">obj2</code>를 rest parameter로 생성한다. 여기서 <code class=\"language-text\">c</code>는 destructing에 의해 하나의 변수로 정의가 되었지만 필요가 없으므로 그냥 버린다.</p>\n<h5>헷갈림을 줄이는 방법</h5>\n<p>위에서 설명했듯이 rest parameter가 함수 parameter가 아닌 다른 곳에 사용되어 destructing에 응용되면 헷갈림을 유발한다. 위의 예제들은 최대한 간략화 시켰기에 그나마 괜찮은 편이지만, 실무에서 사용하는 더 복잡한 코드에 삽입된 <code class=\"language-text\">...</code>들을 보면 조금 당황하게 된다. 이 때 코드를 이해하는데 도움이 되는 문장을 몇개 생각해 놓자.</p>\n<ul>\n<li>spread operator는 펼치고, rest parameter는 모은다.</li>\n<li>spread operator는 주는 쪽이고, rest parameter는 받는 쪽이다.</li>\n<li>spread operator는 기존의 변수를 사용하고, rest parameter는 새로운 변수를 만든다.</li>\n</ul>\n<p>마지막으로 위 세가지 문장을 합쳐본다.</p>\n<blockquote>\n<p>spread operator는 기존의 변수를 펼쳐서 주는 쪽이고, rest parameter는 모아서 받아 새로운 변수를 만들어 낸다.</p>\n</blockquote>\n<p>끝.</p>","frontmatter":{"title":"JavaScript(ES6)의 Spread 와 Rest 쉽게 설명하기","date":"December 03, 2020","description":null}},"previous":{"fields":{"slug":"/2020/12/01/index-signatures-in-typescript/"},"frontmatter":{"title":"TypeScript의 index signatures 쉽게 설명하기"}},"next":null},"pageContext":{"id":"30de7482-a78d-5a0a-a516-c6f923b80e7a","previousPostId":"c8cffdf9-ceab-5e2a-b90a-5e205ec17671","nextPostId":null}},"staticQueryHashes":["2841359383","916993862"]}