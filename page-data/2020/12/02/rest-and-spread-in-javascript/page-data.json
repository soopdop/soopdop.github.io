{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/2020/12/02/rest-and-spread-in-javascript/","result":{"data":{"site":{"siteMetadata":{"title":"Harry Park's Blog"}},"markdownRemark":{"id":"ae66b8de-6098-5aba-b026-aa2b6a54086f","excerpt":"이 포스트는 JavaScript(ES6)에서  기호를 사용하는 두 가지, Spread Operator와 Rest Parameter…","html":"<!--\n참고문서:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\nhttps://medium.com/javascript-in-plain-english/es6-spread-parameter-vs-rest-operator-5e3c924c4e1f\n-->\n<p>이 포스트는 JavaScript(ES6)에서 <code class=\"language-text\">...</code> 기호를 사용하는 두 가지, Spread Operator와 Rest Parameter를 쉽게 설명하기 위해서 작성되었다. 이미 익숙한 사람들이라면 이 것을 굳이 쉽게 설명해야할 필요성이 있을까 의문이 들 수 있다. 하지만 복잡한 실무 코드를 통해 처음 접하는 사람들에게는 혼란을 가져다 줄 수 있는 경우가 있어 보이므로 정리해 본다.</p>\n<h2 id=\"만만한-spread로-부터\" style=\"position:relative;\"><a href=\"#%EB%A7%8C%EB%A7%8C%ED%95%9C-spread%EB%A1%9C-%EB%B6%80%ED%84%B0\" aria-label=\"만만한 spread로 부터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>만만한 Spread로 부터</h2>\n<p>spread operator는 iterable 객체를 함수의 인자 혹은 배열 literal의 요소로 확장한다. 조금 더 쉽게 말하면 배열과 같은 복수개의 데이터를 가진 데이터형을 <code class=\"language-text\">, , ,</code>으로 구분되는 여러개의 요소로 펼치는(spread) 곳에 사용한다는 것이다.</p>\n<h3 id=\"함수의-인자로-펼치기\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EC%9D%98-%EC%9D%B8%EC%9E%90%EB%A1%9C-%ED%8E%BC%EC%B9%98%EA%B8%B0\" aria-label=\"함수의 인자로 펼치기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수의 인자로 펼치기</h3>\n<p>대표적인 사용법 중 하나는 Iterable 객체를 함수의 인자로 펼쳐서 호출하는 것이다. 각 요소가 <code class=\"language-text\">, , ,</code> 으로 펼쳐진 모습을 머리 속에서 상상하면, 자연스럽게 함수의 인자로 들어갈 수 있다 느껴진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">Map</code>과 <code class=\"language-text\">Set</code> 또한 iterable 객체이므로 다음과 같이 확장이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>map<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>set<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"다른-배열의-요소로-펼치기\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EB%A5%B8-%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%9A%94%EC%86%8C%EB%A1%9C-%ED%8E%BC%EC%B9%98%EA%B8%B0\" aria-label=\"다른 배열의 요소로 펼치기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다른 배열의 요소로 펼치기</h3>\n<p><code class=\"language-text\">[1, 2, 3, 4]</code> 와 같은 형태를 array literal이라고 한다. 배열을 정의하기 위해서 흔하게 사용하는 방법이다. spread는 이 array literal에 다른 배열의 요소를 넣기 위해서 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 배열의 얕은 복사.</span>\n<span class=\"token keyword\">const</span> arr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 요소 추가.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>위의 두 예제도 머리 속에서 각 배열 요소가 <code class=\"language-text\">, , ,</code> 으로 펼쳐진 모습을 상상하면 이해하기 쉽다. <code class=\"language-text\">arr2</code>는 <code class=\"language-text\">arr</code>과 동일한 배열 요소를 가질 것이고, <code class=\"language-text\">arr3</code>은 가장 뒤쪽에 요소가 하나 추가된다.</p>\n<h3 id=\"매우-유용한-용법들\" style=\"position:relative;\"><a href=\"#%EB%A7%A4%EC%9A%B0-%EC%9C%A0%EC%9A%A9%ED%95%9C-%EC%9A%A9%EB%B2%95%EB%93%A4\" aria-label=\"매우 유용한 용법들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>매우 유용한 용법들</h3>\n<p>다른 배열의 요소로 펼치기는 spread operator의 존재의 이유라고 말할 수 있을 정도로 많이 활용된다. 그 이유는 대부분의 경우, 사용법도 헷갈리는 배열 조작 함수들을 대체할 수있기 때문이다. <code class=\"language-text\">push()</code>, <code class=\"language-text\">splice()</code>, <code class=\"language-text\">concat()</code> , <code class=\"language-text\">unshift()</code></p>\n<p>배열 복사하기</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> arr <span class=\"token comment\">// 이것을 복사라고 말하는 사람은 경계 대상 1호.</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 배열 복사. 새로운 배열의 생성하되 그 요소들을 arr을 펼쳐서 새로운 배열의 요소로써 채우는 것.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>여러개의 베열을 연결한 새로운 배열 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 두 배열의 요소를 합친 새로운 배열 생성</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>배열의 중간에 다른 배열 요소 추가하기</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 중간에 다른 배열의 요소를 추가하여 새로운 배열 생성</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h3 id=\"객체-literal-펼치기\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-literal-%ED%8E%BC%EC%B9%98%EA%B8%B0\" aria-label=\"객체 literal 펼치기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 Literal 펼치기</h3>\n<p>이 또한 spread operator의 유용한 용법이다. 배열에서의 사용 예처럼 객체 또한 복사, 병합 등의 다양한 조작이 가능하다.</p>\n<p>하나의 예로 Redux의 <a href=\"https://redux.js.org/recipes/structuring-reducers/immutable-update-patterns\">Immutable Update Patterns</a>에서 <code class=\"language-text\">Object.assign()</code>을 대체하고 있는 것을 알 수 있다. 훨씬 보기 좋은 방식으로 객체를 복사하고 복사한 객체에 필요한 property를 수정한다. Redux에서는 기존의 state object를 조작하는 매번 새로운 state를 생성하는 <code class=\"language-text\">immutable update</code> 방식을 사용하기에 이 연산자가 유용하게 사용된다.</p>\n<p>객체의 복사</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>obj <span class=\"token punctuation\">}</span> <span class=\"token comment\">// obj객체를 펼쳐서 새로운 객체를 생성한다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">===</span> obj1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false, 같은 요소를 가졌지만 새로 생성된 객체이므로 서로 다른 객체이다.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>객체의 연결</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>obj<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>obj1 <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 두 객체를 펼쳐서 새로운 객체를 생성한다.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>객체에 새로운 property 추가, 기존 property 수정</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>obj<span class=\"token punctuation\">,</span>\n  c<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 기존의 property를 한 번더 정의해줌으로써 property를 수정할 수 있다.</span>\n  d<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 새로운 property를 추가할 수 있다.</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"이제-rest-parameter\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A0%9C-rest-parameter\" aria-label=\"이제 rest parameter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이제 Rest Parameter</h2>\n<p>Rest parameter는 하나의 함수에서 여러 개의 인자를 받을 때, 앞 쪽에서 받은 인자를 제외한 <code class=\"language-text\">나머지(rest)</code> 인자들을 배열로 합쳐서 받을 수 있게 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"a\",\"b\",\"c\"]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"세상에-바보-같은-질문은-없다\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EC%83%81%EC%97%90-%EB%B0%94%EB%B3%B4-%EA%B0%99%EC%9D%80-%EC%A7%88%EB%AC%B8%EC%9D%80-%EC%97%86%EB%8B%A4\" aria-label=\"세상에 바보 같은 질문은 없다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세상에 바보 같은 질문은 없다?</h3>\n<p>위의 단순한 예제도 혼돈스러울 수 있는 이유는 그 것이 spread operator라 착각할 수 있기 때문이다. 누군가 <code class=\"language-text\">...rest</code>가 다음 예제에서 <code class=\"language-text\">rest</code> 변수에 받은 배열을 <code class=\"language-text\">b</code>, <code class=\"language-text\">c</code>, <code class=\"language-text\">d</code> 변수로 각각 펼쳐주는 것이 아니냐고 한다면 그럴싸하게 느껴질 것 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token comment\">// 혹시 여기서</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>조금 더 생각해보면 얼마나 바보 같은지 깨달을 수 있다. 선언되지 않은 <code class=\"language-text\">b</code>,<code class=\"language-text\">c</code>,<code class=\"language-text\">d</code>는 사용할 수 없기 때문이다. 따라서 컴파일 에러(eslint/tslint)가 발생한다. 게다가 저런 용도로 사용할 이유가 없는데, <code class=\"language-text\">b</code>,<code class=\"language-text\">c</code>,<code class=\"language-text\">d</code>를 각각 사용하려면 <code class=\"language-text\">rest</code>에 나머지 인자를 몰아서 받을 필요도 없기 때문이다.</p>\n<h3 id=\"헷갈림을-유발-예제\" style=\"position:relative;\"><a href=\"#%ED%97%B7%EA%B0%88%EB%A6%BC%EC%9D%84-%EC%9C%A0%EB%B0%9C-%EC%98%88%EC%A0%9C\" aria-label=\"헷갈림을 유발 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>헷갈림을 유발 예제</h3>\n<p>바보 같은 예제 말고 진짜 헷갈림을 유발하는 곳은 따로 있다. 이름과 행동이 불일치하게도 rest parameter가 꼭 함수의 인자에서만 쓰이는게 아니기 때문이다. 다음 예제를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>firstElement<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>firstElement<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"a\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"b\", \"c\", \"d\"]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이곳에서 사용된 <code class=\"language-text\">...</code>은 spread operator와 rest parameter 중 무엇일까? 위 예제는 rest parameter가 destructing과 함께 쓰인 경우이다. 이 방법으로 <code class=\"language-text\">arr</code>에서 <code class=\"language-text\">&quot;a&quot;</code>를 제외한 배열을 간결한 코드를 통해 얻을 수 있기에 매우 유용하다.</p>\n<p>짧은 예제이기 때문에 괜찮을 수 있지만 변수명과 대입연산자의 좌우항 길어질 경우에는 구분이 어려워진다. 이 것이 rest paramter라는 몇가지 단서를 통해서 알 수 있다. <code class=\"language-text\">rest</code>가 이미 선언되어 있던 변수가 아니라는 점, rest는 대입 연산자의 좌항에 존재한다는 점, 그리고 TypeScript의 경우 Mouseover를 통해 배열이라는 것을 알 수 있다는 점이다.</p>\n<p>위의 사용법은 객체에도 적용된다. 한 객체에서 원하는 property를 가지지 않은 객체를 만들어 낼때 사용하면 매우 유용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> c<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>obj2 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj <span class=\"token comment\">// a와 b property만 가진 새로운 객체 obj2를 생성한다.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>위 예제에서는 <code class=\"language-text\">c</code> property를 제거하고 <code class=\"language-text\">a</code>와 <code class=\"language-text\">b</code> property만을 가진 새로운 객체 <code class=\"language-text\">obj2</code>를 rest parameter로 생성한다. 여기서 <code class=\"language-text\">c</code>는 destructing에 의해 하나의 변수로 정의가 되었지만 필요가 없으므로 그냥 버린다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>rest parameter가 이름을 배신하고 parameter가 아닌 곳에 사용되면 헷갈림을 유발할 수 있다. 심플한 예제를 보면 자신감이 충만하지만, 훨씬 복잡한 코드 중간에 삽입된 다수의 <code class=\"language-text\">...</code>들을 보면 착각의 늪에 빠질 수 있다. 이럴 때 코드를 이해하는데 도움이 되는 문장을 몇개 생각해 놓자.</p>\n<ul>\n<li>spread operator는 펼치고, rest parameter는 모은다.</li>\n<li>spread operator는 주는 쪽이고, rest parameter는 받는 쪽이다.</li>\n<li>spread operator는 기존의 변수를 사용하고, rest parameter는 새로운 변수를 만든다.</li>\n</ul>\n<p>마지막으로 위 세가지 문장을 합쳐본다.</p>\n<blockquote>\n<p>spread operator는 기존의 변수를 펼쳐서 주는 쪽이고, rest parameter는 여러개의 인자를 받는 쪽이며 새로운 배열이나 객체를 만들어 낸다.</p>\n</blockquote>\n<p>끝.</p>","frontmatter":{"title":"JavaScript(ES6)의 Spread 와 Rest 쉽게 설명하기","date":"December 02, 2020","description":null},"tableOfContents":"<ul>\n<li>\n<p><a href=\"/2020/12/02/rest-and-spread-in-javascript/#%EB%A7%8C%EB%A7%8C%ED%95%9C-spread%EB%A1%9C-%EB%B6%80%ED%84%B0\">만만한 Spread로 부터</a></p>\n<ul>\n<li><a href=\"/2020/12/02/rest-and-spread-in-javascript/#%ED%95%A8%EC%88%98%EC%9D%98-%EC%9D%B8%EC%9E%90%EB%A1%9C-%ED%8E%BC%EC%B9%98%EA%B8%B0\">함수의 인자로 펼치기</a></li>\n<li><a href=\"/2020/12/02/rest-and-spread-in-javascript/#%EB%8B%A4%EB%A5%B8-%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%9A%94%EC%86%8C%EB%A1%9C-%ED%8E%BC%EC%B9%98%EA%B8%B0\">다른 배열의 요소로 펼치기</a></li>\n<li><a href=\"/2020/12/02/rest-and-spread-in-javascript/#%EB%A7%A4%EC%9A%B0-%EC%9C%A0%EC%9A%A9%ED%95%9C-%EC%9A%A9%EB%B2%95%EB%93%A4\">매우 유용한 용법들</a></li>\n<li><a href=\"/2020/12/02/rest-and-spread-in-javascript/#%EA%B0%9D%EC%B2%B4-literal-%ED%8E%BC%EC%B9%98%EA%B8%B0\">객체 Literal 펼치기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2020/12/02/rest-and-spread-in-javascript/#%EC%9D%B4%EC%A0%9C-rest-parameter\">이제 Rest Parameter</a></p>\n<ul>\n<li><a href=\"/2020/12/02/rest-and-spread-in-javascript/#%EC%84%B8%EC%83%81%EC%97%90-%EB%B0%94%EB%B3%B4-%EA%B0%99%EC%9D%80-%EC%A7%88%EB%AC%B8%EC%9D%80-%EC%97%86%EB%8B%A4\">세상에 바보 같은 질문은 없다?</a></li>\n<li><a href=\"/2020/12/02/rest-and-spread-in-javascript/#%ED%97%B7%EA%B0%88%EB%A6%BC%EC%9D%84-%EC%9C%A0%EB%B0%9C-%EC%98%88%EC%A0%9C\">헷갈림을 유발 예제</a></li>\n</ul>\n</li>\n<li><a href=\"/2020/12/02/rest-and-spread-in-javascript/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>"},"previous":{"fields":{"slug":"/2020/12/01/index-signatures-in-typescript/"},"frontmatter":{"title":"TypeScript의 Index Signatures 쉽게 설명하기"}},"next":{"fields":{"slug":"/2020/12/03/add-table-of-content-gatsby/"},"frontmatter":{"title":"Gatsby Blog에 목차 추가하기"}}},"pageContext":{"id":"ae66b8de-6098-5aba-b026-aa2b6a54086f","previousPostId":"9f14b603-498b-5cff-944f-1bf7220495c9","nextPostId":"12c3b0cb-2726-5489-b4c8-544804eba4f0"}},"staticQueryHashes":["2841359383"]}