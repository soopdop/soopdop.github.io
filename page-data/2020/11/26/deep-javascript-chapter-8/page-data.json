{"componentChunkName":"component---src-templates-blog-post-template-index-tsx","path":"/2020/11/26/deep-javascript-chapter-8/","result":{"data":{"site":{"siteMetadata":{"title":"Harry Park's Blog"}},"markdownRemark":{"id":"7d25fd77-b363-520c-b865-674e33d73c62","excerpt":"8.1. JavaScript 코딩 스타일 8.1.1. 변수 이름 표기법 Javascript에서는 camel case 표기법이 좋다.  처럼 DOM을 다루는 API들이 이미 채택하고 있기 때문이다. 여기에 다음과 같이 변수 타입을 나타내는 헝가리안 표기법을 더하는 것도 좋다. 8.1.…","html":"<h2 id=\"81-javascript-코딩-스타일\" style=\"position:relative;\"><a href=\"#81-javascript-%EC%BD%94%EB%94%A9-%EC%8A%A4%ED%83%80%EC%9D%BC\" aria-label=\"81 javascript 코딩 스타일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8.1. JavaScript 코딩 스타일</h2>\n<h3 id=\"811-변수-이름-표기법\" style=\"position:relative;\"><a href=\"#811-%EB%B3%80%EC%88%98-%EC%9D%B4%EB%A6%84-%ED%91%9C%EA%B8%B0%EB%B2%95\" aria-label=\"811 변수 이름 표기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8.1.1. 변수 이름 표기법</h3>\n<p>Javascript에서는 camel case 표기법이 좋다. <code class=\"language-text\">getElementById</code> 처럼 DOM을 다루는 API들이 이미 채택하고 있기 때문이다. 여기에 다음과 같이 변수 타입을 나타내는 헝가리안 표기법을 더하는 것도 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">var</span> nFirstVariable <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">var</span> strSecondVariable <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token keyword\">var</span> arrSomeLongVariableName <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> g_nGlobalVariable</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"812-공백과-탭\" style=\"position:relative;\"><a href=\"#812-%EA%B3%B5%EB%B0%B1%EA%B3%BC-%ED%83%AD\" aria-label=\"812 공백과 탭 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8.1.2. 공백과 탭</h3>\n<p>공백을 선호하는 추세로 바뀌고 있으나, 탭은 1바이트라는 장점을 가지고 있다. 이 책에서는 4칸이 가독성이 더 좋다고 했다.</p>\n<h3 id=\"813-중괄호를-여는-위치\" style=\"position:relative;\"><a href=\"#813-%EC%A4%91%EA%B4%84%ED%98%B8%EB%A5%BC-%EC%97%AC%EB%8A%94-%EC%9C%84%EC%B9%98\" aria-label=\"813 중괄호를 여는 위치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8.1.3. 중괄호를 여는 위치</h3>\n<p>중괄호는 줄바꿈하지 않는 것이 좋고, 줄바꿈을 한다면 오동작을 주의해야 한다. Javascript는 세미콜론 사용에 대한 규칙을 느슨하게 적용하는데, <code class=\"language-text\">return</code> 다음 줄에 결과를 주더라도 <code class=\"language-text\">return;</code>으로 만들어 버리기 때문이다.</p>\n<h3 id=\"814-strict-mode\" style=\"position:relative;\"><a href=\"#814-strict-mode\" aria-label=\"814 strict mode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8.1.4. strict mode</h3>\n<p>ECMAScript 5가 권장하는 방법이다. <code class=\"language-text\">&quot;use strict&quot;</code>파일이나 함수에 추가함으로서 설정 가능하다. strict 모드에서 제한 되는 내용은 다음과 같다.</p>\n<h4 id=\"scope-내부에서-var-없이-global-변수를-선언할-수-없다\" style=\"position:relative;\"><a href=\"#scope-%EB%82%B4%EB%B6%80%EC%97%90%EC%84%9C-var-%EC%97%86%EC%9D%B4-global-%EB%B3%80%EC%88%98%EB%A5%BC-%EC%84%A0%EC%96%B8%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4\" aria-label=\"scope 내부에서 var 없이 global 변수를 선언할 수 없다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>scope 내부에서 var 없이 global 변수를 선언할 수 없다</h4>\n<p>책에서의 설명은 “var 없이 변수를 사용할때 레퍼런스 오류 발생”이라고 하는데 맞기도 하고 틀리기도 한 말이다. strict mode에서는 글로벌 변수를 선언할때도 var를 붙어야만 하기 때문이다. 하지만 아래와 같은 코드일 경우, global에 이미 선언되어 있으면 에러가 발생하지 않는다. 이 것은 delete가 변수에 동작하지 않는 것과도 연관이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  globalVar <span class=\"token operator\">=</span> <span class=\"token string\">\"This will be global\"</span>\n  <span class=\"token comment\">// 에러! 단, 이미 해당 글로벌 변수가 선언되어 있으면 에러 발생하지 않음.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"delete를-변수나-함수에-사용할-수-없다\" style=\"position:relative;\"><a href=\"#delete%EB%A5%BC-%EB%B3%80%EC%88%98%EB%82%98-%ED%95%A8%EC%88%98%EC%97%90-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4\" aria-label=\"delete를 변수나 함수에 사용할 수 없다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>delete를 변수나 함수에 사용할 수 없다</h4>\n<p>원래 객체의 속성을 지우는 기능이이라고 생각하면 쉽다. 그러나, <code class=\"language-text\">delete</code>에는 좀 더 깊은 내용이 숨어 있다. <code class=\"language-text\">var a = 1;</code> 와 <code class=\"language-text\">window.a = 1;</code>은 같은 글로벌 변수인데다가 결국 window객체의 속성 값인 <code class=\"language-text\">a</code>가 셋팅 되는 것이지만, <code class=\"language-text\">delete</code>의 가능 여부가 다르기 때문에 분명한 차이가 있다. hoisted와도 연관이 있다. <a href=\"%22https://stackoverflow.com/questions/1596782/how-to-unset-a-javascript-variable%22\">Stack overflow</a>를 보고 나중에 보고 조금 더 정리 예정.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">delete</span> a <span class=\"token comment\">// 에러!</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"변수에-eval과-arguments를-이름으로-사용할-수-없다\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98%EC%97%90-eval%EA%B3%BC-arguments%EB%A5%BC-%EC%9D%B4%EB%A6%84%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4\" aria-label=\"변수에 eval과 arguments를 이름으로 사용할 수 없다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수에 eval과 arguments를 이름으로 사용할 수 없다</h4>\n<p>이 것은 “좀 더 명료한 코드를 위해서”인 것으로 보인다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span>\n<span class=\"token keyword\">var</span> arguments <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 에러!</span>\n<span class=\"token keyword\">var</span> eval <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 이것도 에러!</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"eval함수-안에서-변수를-선언이-불가하다-\" style=\"position:relative;\"><a href=\"#eval%ED%95%A8%EC%88%98-%EC%95%88%EC%97%90%EC%84%9C-%EB%B3%80%EC%88%98%EB%A5%BC-%EC%84%A0%EC%96%B8%EC%9D%B4-%EB%B6%88%EA%B0%80%ED%95%98%EB%8B%A4-\" aria-label=\"eval함수 안에서 변수를 선언이 불가하다  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>eval()함수 안에서 변수를 선언이 불가하다 (??)</h4>\n<p>이 것은 책이 틀린 것처럼 보이는데 확실하지 않다. 하지만 에러는 발생하지 않는다. 주변 스코프에 영향의 주는지의 차이는 있다.</p>\n<p>일반모드 : 실행 컨텍스트에 영향을 줌.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"var a=42;a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 42</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 42</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>strict 모드 : 실행 컨텍스트에 영향을 주지 않음. 새로운 스코프가 생기는 것처럼 보인다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"var a=42;a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 42</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"같은-이름의-파라미터-두개-이상-사용할-수-없다\" style=\"position:relative;\"><a href=\"#%EA%B0%99%EC%9D%80-%EC%9D%B4%EB%A6%84%EC%9D%98-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EB%91%90%EA%B0%9C-%EC%9D%B4%EC%83%81-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4\" aria-label=\"같은 이름의 파라미터 두개 이상 사용할 수 없다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>같은 이름의 파라미터 두개 이상 사용할 수 없다</h4>\n<p>일반 모드 : 파라미터가 같으면 마지막 파라미터를 해당 변수명으로 인식한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>strict 모드 : 파라미터가 같으면 문법 에러를 발생시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 에러!</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"argumentscaller-argumentscallee-에-접근할-수-없다\" style=\"position:relative;\"><a href=\"#argumentscaller-argumentscallee-%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4\" aria-label=\"argumentscaller argumentscallee 에 접근할 수 없다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>arguments.caller, arguments.callee 에 접근할 수 없다</h4>\n<p>caller는 사라진 속성인 것 같고, callee를 strict 모드에서 접근하면 에러가 발생한다.</p>\n<p>일반 모드 : foo()와 함수 코드 출력한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">)</span> <span class=\"token comment\">// foo() {...};</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>strict 모드 : callee에 접근하면 에러를 발생 시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 에러!</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"with-구문을-사용할-수-없다\" style=\"position:relative;\"><a href=\"#with-%EA%B5%AC%EB%AC%B8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4\" aria-label=\"with 구문을 사용할 수 없다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>with 구문을 사용할 수 없다.</h4>\n<p>앞장에서 본 모호함 때문인지, strict 모드에서는 사용이 금지된다.</p>\n<h2 id=\"82-javascript-검증-도구---jslint\" style=\"position:relative;\"><a href=\"#82-javascript-%EA%B2%80%EC%A6%9D-%EB%8F%84%EA%B5%AC---jslint\" aria-label=\"82 javascript 검증 도구   jslint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8.2. JavaScript 검증 도구 - JSLint</h2>\n<p>JavaScript의 코드 검증 도구이다. 권장하는 방법과 모호한 표현을 잡아내고, 불필요한 공백까지도 경고를 출력한다. 예를 들어서 for in 내부에서 속성를 검사할 때 <code class=\"language-text\">hasOwnProperty()</code>를 사용하여 걸러 내는 것이 매우 중요하다. 그렇지 않으면, 프로토타입 체인에 있는 속성까지도 사용하게 되어 의도치 않은 결과가 나온다ㅏ. 여러 IDE에 대해서 JSLint 플러그인이 존재한다. 자세한 규칙에 관해서는 <a href=\"%22http://www.jslint.com/help.html%22\">JSLint</a>를 참고하면 된다.</p>\n<h2 id=\"83-javascript-빌드-환경\" style=\"position:relative;\"><a href=\"#83-javascript-%EB%B9%8C%EB%93%9C-%ED%99%98%EA%B2%BD\" aria-label=\"83 javascript 빌드 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8.3. JavaScript 빌드 환경</h2>\n<p>배포와 빌드에 관한 내용이다. Google Closure를 사용할 때의 설정과 실행방법에 대한 설명이다. 압축을 하거나, git에 hook 스크립트를 집어 넣거나, makefile을 만드는 것에 대한 설명이다.</p>","frontmatter":{"title":"속깊은 JavaScript, Chapter 8. Javascript 코딩과 개발 환경","date":"November 26, 2020","description":null},"tableOfContents":"<ul>\n<li>\n<p><a href=\"/2020/11/26/deep-javascript-chapter-8/#81-javascript-%EC%BD%94%EB%94%A9-%EC%8A%A4%ED%83%80%EC%9D%BC\">8.1. JavaScript 코딩 스타일</a></p>\n<ul>\n<li><a href=\"/2020/11/26/deep-javascript-chapter-8/#811-%EB%B3%80%EC%88%98-%EC%9D%B4%EB%A6%84-%ED%91%9C%EA%B8%B0%EB%B2%95\">8.1.1. 변수 이름 표기법</a></li>\n<li><a href=\"/2020/11/26/deep-javascript-chapter-8/#812-%EA%B3%B5%EB%B0%B1%EA%B3%BC-%ED%83%AD\">8.1.2. 공백과 탭</a></li>\n<li><a href=\"/2020/11/26/deep-javascript-chapter-8/#813-%EC%A4%91%EA%B4%84%ED%98%B8%EB%A5%BC-%EC%97%AC%EB%8A%94-%EC%9C%84%EC%B9%98\">8.1.3. 중괄호를 여는 위치</a></li>\n<li><a href=\"/2020/11/26/deep-javascript-chapter-8/#814-strict-mode\">8.1.4. strict mode</a></li>\n</ul>\n</li>\n<li><a href=\"/2020/11/26/deep-javascript-chapter-8/#82-javascript-%EA%B2%80%EC%A6%9D-%EB%8F%84%EA%B5%AC---jslint\">8.2. JavaScript 검증 도구 - JSLint</a></li>\n<li><a href=\"/2020/11/26/deep-javascript-chapter-8/#83-javascript-%EB%B9%8C%EB%93%9C-%ED%99%98%EA%B2%BD\">8.3. JavaScript 빌드 환경</a></li>\n</ul>"},"previous":{"fields":{"slug":"/2020/11/26/deep-javascript-chapter-5/"},"frontmatter":{"title":"속깊은 JavaScript, Chapter 5. 디자인 패턴 실용"}},"next":{"fields":{"slug":"/2020/11/26/deep-javascript-chapter-9/"},"frontmatter":{"title":"속깊은 JavaScript, Chapter 9. JavaScript 표준"}}},"pageContext":{"id":"7d25fd77-b363-520c-b865-674e33d73c62","previousPostId":"6a4ea0db-c324-5302-b19c-5af98d736cf4","nextPostId":"0df413c4-d556-5c4f-b589-1e153a4537f0"}},"staticQueryHashes":["2841359383"]}